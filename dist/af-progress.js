var v=Object.defineProperty;var b=(s,t,e)=>t in s?v(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var o=(s,t,e)=>(b(s,typeof t!="symbol"?t+"":t,e),e);var h;class u extends HTMLElement{constructor(){super();o(this,"shadow");o(this,"form",this.closest("form"));o(this,"actionForm",this.closest("action-form"));o(this,"steps",(h=this.actionForm)==null?void 0:h.steps);this.shadow=this.attachShadow({mode:"open"}),!(!this.actionForm||!this.steps)&&(this.actionForm.addEventListener("af-step",()=>{console.log("af-step listener called"),this.render()}),this.render(),this.shadow.addEventListener("click",e=>{const r=e.target;if(r instanceof HTMLButtonElement&&r.matches(".step")&&!r.disabled){const a=Number(r.dataset.index||0);this.dispatchEvent(new CustomEvent("af-step",{bubbles:!0,composed:!0,detail:{step:a}})),this.render()}}))}get stepIndex(){var e;return((e=this.actionForm)==null?void 0:e.stepIndex)||0}render(){var a,n,c;if(!this.form||!((a=this.actionForm)!=null&&a.steps))return;const e=this.stepIndex/(((n=this.actionForm)==null?void 0:n.steps.length)-1)*100,r="<style>:host{display:grid;position:relative;align-items:center;--step-border-size:.22em;--step-bg:white;--step-text:inherit;--inactive:lightgray;--active:lightseagreen;--incomplete:coral;--completed:var(--active);--completed-bg:var(--active);--completed-text:white}.progress{background:var(--active);height:.5em;grid-row:-1/1;grid-column:-1/1}nav{margin:0;padding:0;list-style:none;display:flex;justify-content:space-between;grid-row:-1/1;grid-column:-1/1}.bg{background:var(--inactive);height:.5em;grid-row:-1/1;grid-column:-1/1}.step{border:var(--step-border-size) solid var(--inactive);border-radius:100%;width:2em;height:2em;line-height:1.65em;text-align:center;background:var(--step-bg);font-size:.9em;position:relative;z-index:1;padding:0;margin:0;cursor:pointer;color:var(--step-text)}.step.completed{border-color:var(--completed);background:var(--completed-bg);color:var(--completed-text)}.step:disabled{opacity:1;cursor:not-allowed}.step[aria-current=step]{border-color:var(--active)}.step:not(.completed):has(~.step[aria-current=step]){border-color:var(--incomplete)}</style>";this.shadow.innerHTML=`${r}
        <div class="bg" part="bg"></div>
        <div class="progress" part="progress" style="width: ${e}%;"></div>
        <nav part="nav">
        ${Array.from((c=this.actionForm)==null?void 0:c.steps).map((d,i)=>{const l=i===this.stepIndex?"active":"",p=d.completed?"completed":"",m=this.hasAttribute("enable-all")||this.stepIndex>i?"":"disabled",g=d.getAttribute("progress-title")||"";return`<button type="button" part="step ${p} ${l}" ${m} title="${g}" class="step ${p}" ${l&&'aria-current="step"'} aria-label="Step ${i+1}" data-index="${i}">${i+1}</button>`}).join("")}
        </nav>
        `}}customElements.define("af-progress",u);
//# sourceMappingURL=af-progress.js.map
