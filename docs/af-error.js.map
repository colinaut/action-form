{"version":3,"file":"af-error.js","sources":["../src/af-error.ts"],"sourcesContent":["type HTMLFormElement = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement | HTMLFieldSetElement;\n\nfunction isHTMLFormElement(el: Element): el is HTMLFormElement {\n\treturn el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement || el instanceof HTMLFieldSetElement;\n}\n\nexport default class ActionFormError extends HTMLElement {\n\tpublic target: HTMLFormElement | null = null;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst targetId = this.getAttribute(\"for\") || \"\";\n\t\tconst target = document.getElementById(targetId) || this.closest(\"label\")?.querySelector(`input, select, textarea`);\n\t\tthis.target = target && isHTMLFormElement(target) ? target : null;\n\t}\n\n\t// TODO: get this working for fieldsets again!!!!\n\tpublic showError(invalid: boolean = true): void {\n\t\tconst el = this.target;\n\t\tif (!el) return;\n\t\t// console.log(\"ðŸš€ ~ file: af-error.ts:ActionFormError.showError ~ el\", el);\n\n\t\tif (invalid) {\n\t\t\tthis.setAttribute(\"invalid\", \"\");\n\t\t\tel.setAttribute(\"aria-invalid\", \"true\");\n\t\t} else {\n\t\t\tthis.removeAttribute(\"invalid\");\n\t\t\tel.removeAttribute(\"aria-invalid\");\n\t\t}\n\t}\n\n\t// TODO: QA aria is done right\n\tprivate addAria = (target: HTMLElement) => {\n\t\tif (!isHTMLFormElement(target)) return;\n\t\tconst id = this.getAttribute(\"id\") || `${target.id || target.name || target.tagName.toLowerCase()}-${Math.random().toString(36).substring(2, 9)}`;\n\t\tthis.setAttribute(\"id\", id);\n\t\ttarget.setAttribute(\"aria-describedby\", id);\n\t\treturn id;\n\t};\n\n\tpublic connectedCallback(): void {\n\t\t// get field ID from attribute\n\t\tif (this.target) {\n\t\t\tconst el = this.target;\n\t\t\tconsole.log(`watching ${el.tagName.toLowerCase()} ${el.id}`);\n\n\t\t\t// Make id and add aria-describedby attribute to the target element\n\t\t\tthis.addAria(el);\n\t\t}\n\t}\n\n\t// public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t// \tconsole.log(\"changed\", name, oldValue, newValue);\n\t// }\n}\ncustomElements.define(\"af-error\", ActionFormError);\n"],"names":["isHTMLFormElement","el","ActionFormError","_a","__publicField","target","id","targetId","invalid"],"mappings":"wKAEA,SAASA,EAAkBC,EAAoC,CAC9D,OAAOA,aAAc,kBAAoBA,aAAc,qBAAuBA,aAAc,mBAAqBA,aAAc,mBAChI,CAEA,MAAqBC,UAAwB,WAAY,CAGxD,aAAc,CAPf,IAAAC,EAQQ,QAHAC,EAAA,cAAiC,MA0BhCA,EAAA,eAAWC,GAAwB,CACtC,GAAA,CAACL,EAAkBK,CAAM,EAAG,OAC1B,MAAAC,EAAK,KAAK,aAAa,IAAI,GAAK,GAAGD,EAAO,IAAMA,EAAO,MAAQA,EAAO,QAAQ,aAAa,IAAI,KAAK,OAAS,EAAA,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,CAAC,GAC1I,YAAA,aAAa,KAAMC,CAAE,EACnBD,EAAA,aAAa,mBAAoBC,CAAE,EACnCA,CAAA,GA1BP,MAAMC,EAAW,KAAK,aAAa,KAAK,GAAK,GACvCF,EAAS,SAAS,eAAeE,CAAQ,KAAKJ,EAAA,KAAK,QAAQ,OAAO,IAApB,YAAAA,EAAuB,cAAc,4BACzF,KAAK,OAASE,GAAUL,EAAkBK,CAAM,EAAIA,EAAS,IAC9D,CAGO,UAAUG,EAAmB,GAAY,CAC/C,MAAMP,EAAK,KAAK,OACXA,IAGDO,GACE,KAAA,aAAa,UAAW,EAAE,EAC5BP,EAAA,aAAa,eAAgB,MAAM,IAEtC,KAAK,gBAAgB,SAAS,EAC9BA,EAAG,gBAAgB,cAAc,GAEnC,CAWO,mBAA0B,CAEhC,GAAI,KAAK,OAAQ,CAChB,MAAMA,EAAK,KAAK,OACR,QAAA,IAAI,YAAYA,EAAG,QAAQ,YAAa,CAAA,IAAIA,EAAG,EAAE,EAAE,EAG3D,KAAK,QAAQA,CAAE,CAChB,CACD,CAKD,CACA,eAAe,OAAO,WAAYC,CAAe"}