{"version":3,"file":"action-form.js","sources":["../src/action-form.ts"],"sourcesContent":["import type ActionFormStep from \"./af-step\";\nimport type ActionFormError from \"./af-error\";\nimport type ActionFormGroupCount from \"./af-group-count\";\nimport type { ActionFormStepEvent } from \"./types\";\n\ntype FormField = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\nfunction isField(el: Element): el is FormField {\n\treturn el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement;\n}\n\nfunction randomId(): string {\n\treturn Math.random().toString(36).substring(2);\n}\n\nfunction IsJsonObject(str: string) {\n\ttry {\n\t\tconst json = JSON.parse(str);\n\t\treturn !!json && typeof json === \"object\";\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nexport default class ActionForm extends HTMLElement {\n\tpublic form = (this.querySelector(\"form\") as HTMLFormElement) || null;\n\tpublic steps = this.querySelectorAll(\"af-step\") as NodeListOf<ActionFormStep>;\n\tpublic stepIndex: number = 0; // current step\n\n\tpublic storeKey: string = this.hasAttribute(\"store\") ? `action-form-${this.getAttribute(\"store\") || this.id || this.form.id || randomId()}` : \"\";\n\tprivate persistedFields: string[] = [];\n\n\tprivate watchers: { el: HTMLElement; if: boolean; text: boolean; name: string; value?: string; notValue?: string; regex?: RegExp }[] = [];\n\n\tprivate storeGetFields!: NodeListOf<FormField>;\n\tprivate storeListenFields!: NodeListOf<FormField>;\n\n\tconstructor() {\n\t\tsuper();\n\t\tdocument.documentElement.classList.add(\"js\");\n\n\t\tconst form = this.form;\n\t\tif (form) {\n\t\t\t/*\n\t\t\t * Set novalidate on the form if novalidate set on action-form.\n\t\t\t * This way novalidate is only set if javascript is loaded and form-action is defined.\n\t\t\t * We want to allow falling back to browser validation if javascript is not loaded.\n\t\t\t */\n\t\t\tif (this.hasAttribute(\"novalidate\")) {\n\t\t\t\tform.setAttribute(\"novalidate\", \"\");\n\t\t\t}\n\n\t\t\tthis.steps.forEach((step, i) => {\n\t\t\t\tstep.dataset.index = String(i);\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tstep.classList.add(\"first\", \"active\");\n\t\t\t\t}\n\t\t\t\tif (i === this.steps.length - 1) {\n\t\t\t\t\tstep.classList.add(\"last\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.addEventListener(\"af-step\", (event) => {\n\t\t\t\tconst customEvent = event as CustomEvent<ActionFormStepEvent>;\n\t\t\t\tlet stepIndex = this.stepIndex;\n\t\t\t\tif (typeof customEvent.detail?.step === \"number\") {\n\t\t\t\t\tstepIndex = customEvent.detail.step;\n\t\t\t\t} else if (customEvent.detail?.direction) {\n\t\t\t\t\tconsole.log(\"step\", customEvent.detail?.direction);\n\n\t\t\t\t\tstepIndex = stepIndex + customEvent.detail?.direction;\n\t\t\t\t}\n\t\t\t\t// make sure stepIndex is within bounds\n\t\t\t\tstepIndex = Math.max(0, Math.min(stepIndex, this.steps.length - 1));\n\t\t\t\t// set this.stepIndex\n\t\t\t\tthis.stepIndex = stepIndex;\n\t\t\t\t// set active based on index\n\t\t\t\tlet shownIndex = 0;\n\n\t\t\t\tArray.from(this.steps).forEach((step) => {\n\t\t\t\t\t// Set data-index Based on visibility of the step\n\t\t\t\t\tif (step.style.display !== \"none\") {\n\t\t\t\t\t\tstep.dataset.index = String(shownIndex);\n\t\t\t\t\t\tshownIndex++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstep.dataset.index = \"\";\n\t\t\t\t\t}\n\t\t\t\t\t// set active based on index\n\n\t\t\t\t\tif (shownIndex - 1 === stepIndex) {\n\t\t\t\t\t\tstep.classList.add(\"active\");\n\t\t\t\t\t\tthis.stepIndex = stepIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstep.classList.remove(\"active\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Find all fields that require validation error messages\n\t\t\tif (this.hasAttribute(\"auto-error\")) {\n\t\t\t\tconst validationFields = this.querySelectorAll(\"[required],[pattern],[type=phone],[type=email],[type=url]\") as NodeListOf<FormField>;\n\t\t\t\tvalidationFields.forEach((field) => {\n\t\t\t\t\tlet id = field.id || \"\";\n\t\t\t\t\t// Check if there is an af-error attribute for the field, either by id or withing parent label\n\t\t\t\t\tconst errorById = form.querySelector(`af-error[for=\"${id}\"]`);\n\t\t\t\t\tconst errorByProximity = field.closest(\"label\")?.querySelector(`af-error`);\n\t\t\t\t\tif (!errorById && !errorByProximity) {\n\t\t\t\t\t\t// if not then make one\n\t\t\t\t\t\tconst error = document.createElement(\"af-error\");\n\t\t\t\t\t\t// Use data-error for content\n\t\t\t\t\t\terror.textContent = field.dataset.error || \"\";\n\t\t\t\t\t\t// If there is no id attribute on field then make one just to make things easier\n\t\t\t\t\t\tif (!id) {\n\t\t\t\t\t\t\tid = `${field.name || field.tagName.toLowerCase()}-${Math.random().toString(36).substring(2, 9)}`;\n\t\t\t\t\t\t\tfield.setAttribute(\"id\", id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\terror.setAttribute(\"for\", id);\n\t\t\t\t\t\t// add af-error after field\n\t\t\t\t\t\tfield.after(error);\n\t\t\t\t\t\tconsole.log(`Added Error Message for ${field.tagName.toLowerCase()}[${field.name}] #${id}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst fieldsetGroups = this.querySelectorAll(\"fieldset[data-group]\") as NodeListOf<HTMLFieldSetElement>;\n\n\t\t\t\tfieldsetGroups.forEach((fieldset) => {\n\t\t\t\t\tlet id = fieldset.id || \"\";\n\t\t\t\t\tconst errorById = fieldset.querySelector(`af-error[for=\"${id}\"]`);\n\t\t\t\t\tif (!errorById) {\n\t\t\t\t\t\tif (!id) {\n\t\t\t\t\t\t\tid = `${fieldset.name || \"fieldset\"}-${Math.random().toString(36).substring(2, 9)}`;\n\t\t\t\t\t\t\tfieldset.setAttribute(\"id\", id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst error = document.createElement(\"af-error\");\n\n\t\t\t\t\t\terror.setAttribute(\"for\", id);\n\t\t\t\t\t\terror.textContent = fieldset.dataset.error || \"\";\n\t\t\t\t\t\tfieldset.append(error);\n\t\t\t\t\t}\n\t\t\t\t\tconst groupCount = fieldset.querySelector(`af-group-count`) as ActionFormGroupCount | null;\n\t\t\t\t\tif (!groupCount) {\n\t\t\t\t\t\tconst groupCount = document.createElement(\"af-group-count\");\n\t\t\t\t\t\tgroupCount.style.display = \"none\";\n\t\t\t\t\t\tfieldset.append(groupCount);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.enhanceElements();\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                                Add Listeners                               */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\tthis.addEventListener(\"change\", (event) => {\n\t\t\t\tconst target = event.target;\n\t\t\t\tif (target instanceof HTMLElement && target.matches(\"input, textarea, select, af-group-count\")) {\n\t\t\t\t\tconst field = target as FormField | ActionFormGroupCount;\n\n\t\t\t\t\t// if target has an error message, show/hide it\n\t\t\t\t\tconst errorId = field.getAttribute(\"aria-describedby\");\n\t\t\t\t\tif (errorId) {\n\t\t\t\t\t\tconst errorMsg = document.getElementById(errorId);\n\t\t\t\t\t\tif (errorMsg?.matches(\"af-error\")) {\n\t\t\t\t\t\t\tconst afError = errorMsg as ActionFormError;\n\t\t\t\t\t\t\tconst valid = field.checkValidity();\n\t\t\t\t\t\t\tafError.showError(!valid);\n\t\t\t\t\t\t\t// console.log(\"target\", target, errorId, valid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if field has a name match in the watcher array\n\t\t\t\t\tconst watchers = this.watchers.filter((w) => w.name === field.name);\n\t\t\t\t\tif (watchers.length > 0) {\n\t\t\t\t\t\tthis.checkWatchers(watchers);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if store attribute is set then store the values in local storage\n\t\t\t\t\tif (this.storeKey) {\n\t\t\t\t\t\tconst ls = localStorage.getItem(this.storeKey) || \"{}\";\n\t\t\t\t\t\tif (ls && field.name) {\n\t\t\t\t\t\t\tconst values = JSON.parse(ls);\n\t\t\t\t\t\t\t// if element is a checkbox or radio than store as array of checked values\n\t\t\t\t\t\t\tif (field instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(field.type)) {\n\t\t\t\t\t\t\t\t// create temporary array\n\t\t\t\t\t\t\t\tconst tempArray = values[field.name] instanceof Array ? values[field.name] : [];\n\t\t\t\t\t\t\t\t// update array based on checked value\n\t\t\t\t\t\t\t\tif (field.checked) {\n\t\t\t\t\t\t\t\t\ttempArray.push(field.value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttempArray.splice(tempArray.indexOf(field.value), 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalues[field.name] = tempArray;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvalues[field.name] = field.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// if\n\t\t\t\t\t\t\tlocalStorage.setItem(this.storeKey, JSON.stringify(values));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if target has data-store-set then save it to that\n\t\t\t\t\tif (isField(field) && field.dataset.storeSet) {\n\t\t\t\t\t\tconst storeParts = field.dataset.storeSet.split(\".\");\n\t\t\t\t\t\tconst ls = localStorage.getItem(storeParts[0]) || \"{}\";\n\t\t\t\t\t\tif (ls && storeParts.length > 1) {\n\t\t\t\t\t\t\tconst values = JSON.parse(ls);\n\t\t\t\t\t\t\tvalues[storeParts[1]] = field.value;\n\t\t\t\t\t\t\tlocalStorage.setItem(storeParts[0], JSON.stringify(values));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlocalStorage.setItem(field.dataset.storeSet, field.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Override reset button. We need to reset the form and restore the form state in that order.\n\t\t\tconst resetBtns = this.querySelectorAll(\"button[type=reset]\");\n\n\t\t\tresetBtns.forEach((resetBtn) => {\n\t\t\t\tresetBtn.addEventListener(\"click\", (event) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tthis.form.reset();\n\t\t\t\t\tthis.restoreForm();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.addEventListener(\"submit\", (e) => {\n\t\t\t\t// Validate form before submitting\n\t\t\t\tconst formValid = form.checkValidity();\n\t\t\t\tif (!formValid) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tconsole.error(\"Form validation failed\");\n\t\t\t\t\t// find first invalid field or invalid af-group-count\n\t\t\t\t\tconst invalidField = form.querySelector(\"input:invalid, select:invalid, textarea:invalid, af-group-count[validity=false]\") as\n\t\t\t\t\t\t| FormField\n\t\t\t\t\t\t| ActionFormGroupCount\n\t\t\t\t\t\t| null;\n\t\t\t\t\tif (invalidField) {\n\t\t\t\t\t\tconst parentStep = invalidField.closest(\"af-step\") as null | ActionFormStep;\n\t\t\t\t\t\t// check if that field is a child of an af-step element\n\t\t\t\t\t\tif (parentStep) {\n\t\t\t\t\t\t\t// move to that step\n\t\t\t\t\t\t\tthis.dispatchEvent(new CustomEvent<ActionFormStepEvent>(\"af-step\", { detail: { step: Number(parentStep.dataset.index) } }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.log(\"invalidField\", invalidField);\n\t\t\t\t\t\tif (invalidField.matches(\"af-group-count\")) {\n\t\t\t\t\t\t\tconst otherField = invalidField.closest(\"fieldset\")?.querySelector(\"input, select, textarea\") as FormField | null;\n\t\t\t\t\t\t\totherField?.focus();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinvalidField.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidField.dispatchEvent(new Event(\"change\", { bubbles: true }));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If form is valid then erase the stored values except for persisted fields\n\t\t\t\t\tthis.resetStore();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Listen for storage events to update the form data-store-watch elements and the main action-table store\n\t\t\twindow.addEventListener(\"storage\", (event) => {\n\t\t\t\tconsole.log(\"storage\", event, event.key);\n\n\t\t\t\t// Update store elements with data-store-listen but only for matching storeKey\n\t\t\t\tif (this.storeListenFields) {\n\t\t\t\t\tconsole.log(\"🚀 ~ ActionForm ~ window.addEventListener ~ this.storeListenFields:\", this.storeListenFields);\n\t\t\t\t\tconst hasMatchingKey = Array.from(this.storeListenFields).filter((field) => isField(field) && field.dataset.storeGet?.split(\".\")[0] === event.key);\n\t\t\t\t\tconsole.log(\"🚀 ~ ActionForm ~ window.addEventListener ~ hasMatchingKey:\", hasMatchingKey);\n\t\t\t\t\thasMatchingKey.forEach((field) => this.updateStoreField(field));\n\t\t\t\t}\n\t\t\t\tif (this.hasAttribute(\"store-listen\") && event.key === this.storeKey) {\n\t\t\t\t\tthis.restoreFieldValues();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate restoreForm() {\n\t\t// Remove store except for persisted fields\n\t\tthis.resetStore();\n\t\tthis.updateStoreFields(this.storeGetFields);\n\t\tthis.restoreFieldValues();\n\t\t// Find all invalid af-errors and hide them\n\t\tconst invalidErrors = this.querySelectorAll(\"af-error[invalid]\") as NodeListOf<ActionFormError>;\n\t\tinvalidErrors.forEach((error) => {\n\t\t\terror.showError(false);\n\t\t});\n\n\t\tthis.checkWatchers();\n\t\t// Move back to step 0\n\t\tthis.dispatchEvent(new CustomEvent(\"af-step\", { detail: { step: 0 } }));\n\t}\n\n\tprivate resetStore() {\n\t\t// Remove store except for persisted fields\n\t\tconst ls = localStorage.getItem(this.storeKey);\n\t\t// If there are persisted field then maintain them\n\t\tif (ls && this.persistedFields.length > 0) {\n\t\t\tconst values = JSON.parse(ls) as Record<string, string | string[]>;\n\t\t\tObject.keys(values).forEach((key) => {\n\t\t\t\tif (!this.persistedFields.includes(key)) {\n\t\t\t\t\tdelete values[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\t// set store with only persisted fields\n\t\t\tlocalStorage.setItem(this.storeKey, JSON.stringify(values));\n\t\t} else {\n\t\t\tlocalStorage.removeItem(this.storeKey);\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                Method to update fields using data-get-store                */\n\t/* -------------------------------------------------------------------------- */\n\tprivate updateStoreFields(elements: NodeListOf<Element>) {\n\t\telements.forEach((el) => {\n\t\t\tthis.updateStoreField(el);\n\t\t});\n\t}\n\n\tprivate updateStoreField(el: Element) {\n\t\tif (isField(el)) {\n\t\t\tconst stored = el.dataset.storeGet;\n\t\t\tif (!stored) return;\n\t\t\t// split stored by periods\n\t\t\tconst parts = stored.split(\".\");\n\t\t\t// add the part[0] as key to otherLocalStores array unless it already exists\n\t\t\t// get the value from local storage\n\t\t\tconst ls = localStorage.getItem(parts[0]);\n\t\t\tif (ls) {\n\t\t\t\tif (IsJsonObject(ls) && parts.length > 1) {\n\t\t\t\t\tconst value = JSON.parse(ls)[parts[1]];\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tel.value = String(value);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tel.value = ls;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate enhanceElements() {\n\t\t// find all elements with data-store-get and set value\n\t\tthis.storeGetFields = this.querySelectorAll(\"[data-store-get]\");\n\t\tthis.storeListenFields = this.querySelectorAll(\"[data-store-get][data-store-listen]\");\n\n\t\tif (this.storeGetFields.length > 0) {\n\t\t\tthis.updateStoreFields(this.storeGetFields);\n\t\t}\n\n\t\tif (this.storeKey) {\n\t\t\tthis.restoreFieldValues();\n\t\t}\n\n\t\t// find all watchers and create watcher array\n\t\tconst watchers = this.querySelectorAll(\"[data-if],[data-text]\") as NodeListOf<HTMLElement>;\n\n\t\twatchers.forEach((el) => {\n\t\t\tconst watch = el.dataset.if || el.dataset.text;\n\t\t\tconst value = el.dataset.ifValue;\n\t\t\tconst notValue = el.dataset.ifNotValue;\n\t\t\tconst regexStr = el.dataset.ifRegex;\n\t\t\t// if neither watch nor value is set, assume that any value is valid. RegExp /./ tests for any value\n\t\t\tconst regex: RegExp | undefined = regexStr ? new RegExp(regexStr) : undefined;\n\t\t\tif (watch) {\n\t\t\t\tthis.watchers.push({ name: watch, if: !!el.dataset.if, text: !!el.dataset.text, value, notValue, regex, el: el });\n\t\t\t}\n\t\t});\n\n\t\t// set Watchers from the start\n\t\tthis.checkWatchers();\n\n\t\t// check for persisted fields\n\t\tconst persistedFields = this.querySelectorAll(\"[data-persist]\");\n\t\tthis.persistedFields = Array.from(persistedFields).map((el) => (isField(el) ? el.name : \"\"));\n\t}\n\n\tprivate restoreFieldValues() {\n\t\tconst ls = localStorage.getItem(this.storeKey);\n\t\tif (!ls) return;\n\t\tconst values = JSON.parse(ls) as Record<string, string | string[]>;\n\t\tif (typeof values !== \"object\") return;\n\t\t// Cycle through fields based on name\n\t\tObject.keys(values).forEach((key) => {\n\t\t\tconst fields = this.querySelectorAll(`[name=\"${key}\"]`);\n\t\t\tfields.forEach((el) => {\n\t\t\t\tif (isField(el) && !el.matches(\"[type=hidden]\")) {\n\t\t\t\t\t// if this is a checkbox or radio button\n\t\t\t\t\tif (el instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(el.type) && values[key] instanceof Array) {\n\t\t\t\t\t\t// set checked based on value in array\n\t\t\t\t\t\tel.checked = values[key].includes(el.value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// set value\n\t\t\t\t\t\tel.value = String(values[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*               Method to check data-if and data-text watchers               */\n\t/* -------------------------------------------------------------------------- */\n\tpublic checkWatchers(watchers = this.watchers) {\n\t\tconsole.log(\"checkWatchers\", watchers);\n\t\t// Get FormData for watchers\n\t\tconst form = this.querySelector(\"form\");\n\t\tif (!form || watchers.length === 0) return;\n\t\tconst formData = new FormData(form);\n\t\t// Loop through watchers\n\t\twatchers.forEach((watcher) => {\n\t\t\tconst values = formData.getAll(watcher.name);\n\t\t\t// console.log(\"watchers values\", values, watcher);\n\n\t\t\t// Update textContent\n\t\t\tif (watcher.text) {\n\t\t\t\twatcher.el.textContent = values.join(\", \");\n\t\t\t}\n\n\t\t\t// Update display\n\t\t\tif (watcher.if) {\n\t\t\t\tlet valid = values.some((value) => {\n\t\t\t\t\t// typeof value === \"string\" is to ignore formData files\n\t\t\t\t\tif (typeof value === \"string\" && (watcher.value || watcher.regex)) {\n\t\t\t\t\t\t// if is is a string (rather than a File) there is a value or regex to check then check for that\n\t\t\t\t\t\treturn value === watcher.value || (watcher.regex && watcher.regex.test(value));\n\t\t\t\t\t}\n\t\t\t\t\t// if value has no value return false; otherwise true\n\t\t\t\t\treturn !!value;\n\t\t\t\t});\n\t\t\t\t// if valid and there is a notValue then check for that as well\n\t\t\t\tif (watcher.notValue && values.length !== 0 && valid) {\n\t\t\t\t\tvalid = values.every((value) => value !== watcher.notValue);\n\t\t\t\t}\n\t\t\t\t// console.log(\"watcher\", watcher.name, valid);\n\t\t\t\tthis.show(watcher.el, valid);\n\t\t\t\t// if this is af-step then trigger event to update progress bar and step buttons text since there is a change in the number of steps\n\t\t\t\tif (watcher.el.matches(\"af-step\")) this.dispatchEvent(new CustomEvent(\"af-step\"));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate show(el: HTMLElement, show: boolean): void {\n\t\tif (show) {\n\t\t\tel.style.display = \"\";\n\t\t\tel.removeAttribute(\"disabled\");\n\t\t} else {\n\t\t\tel.style.display = \"none\";\n\t\t\tel.setAttribute(\"disabled\", \"\");\n\t\t}\n\t\tel.dispatchEvent(new Event(\"change\", { bubbles: true }));\n\t}\n\n\t// public connectedCallback(): void {\n\t// \tconsole.log(\"connected\");\n\t// }\n\n\t// public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t// \tconsole.log(\"changed\", name, oldValue, newValue);\n\t// }\n}\ncustomElements.define(\"action-form\", ActionForm);\n"],"names":["isField","el","randomId","IsJsonObject","str","json","ActionForm","__publicField","form","step","i","event","_a","_b","_c","_d","customEvent","stepIndex","shownIndex","field","id","errorById","errorByProximity","error","fieldset","groupCount","target","errorId","errorMsg","afError","valid","watchers","w","ls","values","tempArray","storeParts","resetBtn","e","invalidField","parentStep","otherField","hasMatchingKey","key","elements","stored","parts","value","watch","notValue","regexStr","regex","persistedFields","formData","watcher","show"],"mappings":"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"}