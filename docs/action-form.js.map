{"version":3,"file":"action-form.js","sources":["../src/signals.ts","../src/af-step.ts","../src/af-progress.ts","../src/helpers.ts","../src/af-error.ts","../src/af-field-group.ts","../src/af-field-group-count.ts","../src/af-preview.ts","../src/af-text-count.ts","../src/reactiveFormData.ts","../src/reactiveStepData.ts","../src/action-form.ts"],"sourcesContent":["type Context = { execute: () => void };\n\nconst context: Context[] = [];\n\nexport function createSignal<T>(value: T): [() => T, (value: T) => void] {\n\tconst subscriptions = new Set<Context>();\n\n\tconst read = () => {\n\t\tconst observer = context[context.length - 1];\n\t\tif (observer) subscriptions.add(observer);\n\t\treturn value;\n\t};\n\tconst write = (newValue: T) => {\n\t\tvalue = newValue;\n\t\tfor (const observer of subscriptions) {\n\t\t\tobserver.execute();\n\t\t}\n\t};\n\n\treturn [read, write];\n}\n\nexport function createEffect(fn: () => void) {\n\tconst effect = {\n\t\texecute() {\n\t\t\tcontext.push(effect);\n\t\t\tfn();\n\t\t\tcontext.pop();\n\t\t},\n\t};\n\n\teffect.execute();\n}\n","import type ActionForm from \"./action-form\";\nimport { createEffect } from \"./signals\";\n\nexport default class ActionFormStep extends HTMLElement {\n\tprivate shadow!: ShadowRoot | null;\n\t// this.this works if component uses Declarative Shadow DOM or not\n\tprivate DOM!: this | ShadowRoot;\n\n\tprivate actionForm!: ActionForm;\n\n\t// Reflected Attributes\n\tget valid(): boolean {\n\t\treturn this.hasAttribute(\"valid\");\n\t}\n\n\tset valid(value: boolean) {\n\t\tif (value) {\n\t\t\tthis.setAttribute(\"valid\", \"\");\n\t\t} else {\n\t\t\tthis.removeAttribute(\"valid\");\n\t\t}\n\t}\n\n\t// Method Getter\n\tget isValid(): boolean {\n\t\treturn this.querySelectorAll(\":invalid\").length === 0;\n\t}\n\n\tprivate getStepTitle(direction: \"prev\" | \"next\"): string {\n\t\tlet el = direction === \"next\" ? this.nextElementSibling : this.previousElementSibling;\n\t\t// Find next element that is visible\n\t\tif (el && el instanceof HTMLElement && el.style.display === \"none\") {\n\t\t\tel = direction === \"next\" ? el.nextElementSibling : el.previousElementSibling;\n\t\t}\n\t\tif (el && el.matches(\"af-step\")) {\n\t\t\t// Return the data.title if it exists, otherwise return data[direction] on the action-form element or return the direction as sentence case\n\t\t\t// @ts-expect-error if it matches then it is the right element\n\t\t\treturn el.dataset.title || this.actionForm?.dataset[direction] || direction.replace(/^\\w/, (c) => c.toUpperCase());\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tget submit() {\n\t\treturn this.actionForm?.dataset.submit || \"Submit\";\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst actionForm = this.closest(\"action-form\") as ActionForm | null;\n\t\tif (actionForm && actionForm.steps.all.length > 0) {\n\t\t\tthis.actionForm = actionForm;\n\t\t\tconst internals = this.attachInternals();\n\t\t\tthis.shadow = internals.shadowRoot;\n\t\t\tthis.DOM = this.shadow || this;\n\n\t\t\t// update validity and completed when change event is fired\n\t\t\tthis.DOM.addEventListener(\"change\", () => {\n\t\t\t\t// console.log(\"af-step change isValid\", event.target, this.isValid);\n\t\t\t\tthis.valid = this.isValid;\n\t\t\t});\n\n\t\t\t// trigger next or prev step\n\t\t\tthis.DOM.addEventListener(\"click\", (e) => {\n\t\t\t\tconst target = e.target;\n\t\t\t\tif (target instanceof HTMLButtonElement) {\n\t\t\t\t\tif (target.dataset.direction === \"next\" || target.dataset.direction === \"prev\") {\n\t\t\t\t\t\tthis.step(target.dataset.direction);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* ----------- update button text when steps are added or removed ----------- */\n\t\t\tcreateEffect(() => {\n\t\t\t\tconsole.log(\"ðŸ«¨ create effect: af-step: update button text\");\n\t\t\t\tactionForm.steps.stepsLength();\n\t\t\t\tthis.setButtonTexts();\n\t\t\t});\n\t\t}\n\n\t\t// this.actionForm?.step.subscribe(() => {\n\t\t// \tthis.setButtonTexts();\n\t\t// });\n\t}\n\n\tpublic step(direction: \"next\" | \"prev\" = \"next\") {\n\t\t// If button is next check if any elements are invalid before moving to next step\n\t\tthis.actionForm?.steps[direction]();\n\t}\n\n\tpublic connectedCallback(): void {\n\t\t// console.log(\"connected\");\n\t\tthis.valid = this.isValid;\n\n\t\t// check for footer\n\t\tconst footer = this.DOM.querySelector(\"slot[name=footer]\") || this.DOM.querySelector(\"[slot=footer]\");\n\n\t\t// add footer if it doesn't exist\n\t\tif (!footer) {\n\t\t\tconst nav = document.createElement(\"nav\");\n\t\t\tnav.classList.add(\"af-step-nav\");\n\t\t\tnav.setAttribute(\"part\", \"step-nav\");\n\t\t\tnav.setAttribute(\"aria-label\", \"Step Navigation\");\n\t\t\tconst stepButton = (direction: \"next\" | \"prev\" = \"next\") => {\n\t\t\t\tconst title = this.getStepTitle(direction);\n\t\t\t\tif (title) {\n\t\t\t\t\treturn `<button type=\"button\" class=\"af-step-${direction}\" data-direction=\"${direction}\" part=\"step-btn ${direction}\">${title}</button>`;\n\t\t\t\t} else if (direction === \"next\") {\n\t\t\t\t\t// no title = last step\n\t\t\t\t\treturn `<button type=\"submit\" part=\"submit\">${this.submit}</button>`;\n\t\t\t\t} else {\n\t\t\t\t\t// no title = first step\n\t\t\t\t\treturn `<span></span>`;\n\t\t\t\t}\n\t\t\t};\n\t\t\tnav.innerHTML = `${stepButton(\"prev\")}${stepButton(\"next\")}`;\n\t\t\tthis.DOM.appendChild(nav);\n\t\t}\n\t}\n\n\tprivate setButtonTexts() {\n\t\tconst queryBtns = this.DOM.querySelectorAll(\"button[data-direction]\") as NodeListOf<HTMLButtonElement>;\n\t\tqueryBtns.forEach((btn) => {\n\t\t\tif (btn.dataset.direction === \"next\" || btn.dataset.direction === \"prev\") {\n\t\t\t\tbtn.textContent = this.getStepTitle(btn.dataset.direction);\n\t\t\t}\n\t\t});\n\t}\n}\n\n// define progress element here as it is required for step navigation\n","import type ActionForm from \"./action-form\";\nimport { createEffect } from \"./signals\";\nexport default class ActionFormProgress extends HTMLElement {\n\tprivate shadow: ShadowRoot;\n\n\tprivate actionForm!: ActionForm;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shadow = this.attachShadow({ mode: \"open\" });\n\n\t\tconst actionForm = this.closest(\"action-form\") as ActionForm | null;\n\t\tif (actionForm && actionForm.steps.all.length > 0) {\n\t\t\tthis.actionForm = actionForm;\n\t\t\tthis.shadow.addEventListener(\"click\", (e) => {\n\t\t\t\tconst target = e.target;\n\t\t\t\tif (this.actionForm && target instanceof HTMLButtonElement && target.matches(\".step\") && !target.disabled) {\n\t\t\t\t\tconst step = Number(target.dataset.index || 0);\n\t\t\t\t\tactionForm.steps.set(step);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* ---- rerender when step is changed or when steps are added or removed ---- */\n\t\t\tcreateEffect(() => {\n\t\t\t\tconst stepsLength = actionForm.steps.stepsLength();\n\t\t\t\tconst stepIndex = actionForm.steps.stepIndex();\n\t\t\t\tconsole.log(\"ðŸ«¨ create effect: af-progress: rerender\", stepsLength, stepIndex);\n\t\t\t\tthis.render(stepsLength, stepIndex);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate render(stepsLength: number, stepIndex: number) {\n\t\tconst progressPercentage = (stepIndex / (stepsLength - 1)) * 100;\n\n\t\t// TODO: simplify this\n\t\tconst style = `\n        <style>\n        :host {\n            display: grid;\n            position: relative;\n            align-items: center;\n            --step-border-size: .22em;\n            --step-bg: white;\n            --step-text: inherit;\n            --inactive: lightgray;\n            --active: lightseagreen;\n            --invalid: coral;\n            --valid: var(--active);\n            --valid-bg: var(--active);\n            --valid-text: white;\n        }\n        .progress {\n            background: var(--active);\n            height: 0.5em;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        nav {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n            display: flex;\n            justify-content: space-between;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        .bg {\n            background: var(--inactive);\n            height: 0.5em;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        .step {\n            border: var(--step-border-size) solid var(--inactive);\n            border-radius: 100%;\n            width: 2em;\n            height: 2em;\n            line-height: 1.65em;\n            text-align: center;\n            background: var(--step-bg);\n            font-size: 0.9em;\n            position: relative;\n            z-index: 1;\n            padding: 0;\n            margin: 0;\n            cursor: pointer;\n            color: var(--step-text);\n        }\n        .valid:has(~ .active) {\n            border-color: var(--valid);\n            background: var(--valid-bg);\n            color: var(--valid-text);\n        }\n        .step:disabled {\n            opacity: 1;\n            cursor: not-allowed;\n        }\n        .active {\n            border-color: var(--active);\n        }\n        .step:not(.valid):has(~ .active) {\n            border-color: var(--invalid);\n        }\n        </style>\n        `;\n\n\t\t// TODO: add step titles from af-step\n\t\tthis.shadow.innerHTML = `${style}\n        <div class=\"bg\" part=\"bg\"></div>\n        <div class=\"progress\" part=\"progress\" style=\"width: ${progressPercentage}%;\"></div>\n        <nav part=\"nav\">\n        ${Array.from(this.actionForm.steps.getVisible())\n\t\t\t.map((step, index) => {\n\t\t\t\tconst active = index === stepIndex ? \"active\" : \"\";\n\t\t\t\tconst valid = step.valid ? \"valid\" : \"\";\n\t\t\t\tconst disabled = this.hasAttribute(\"enable-all\") || stepIndex > index ? \"\" : \"disabled\";\n\t\t\t\tconst title = step.dataset.title || \"\";\n\t\t\t\treturn `<button type=\"button\" part=\"step ${valid} ${active}\" ${disabled} title=\"${title}\" class=\"step ${valid} ${active}\" ${\n\t\t\t\t\tactive && `aria-current=\"step\"`\n\t\t\t\t} aria-label=\"Step ${index + 1}\" data-index=\"${index}\">${index + 1}</button>`;\n\t\t\t})\n\t\t\t.join(\"\")}\n        </nav>\n        `;\n\t}\n}\n","import type { HTMLFormField, HTMLFormFieldOrGroup, HTMLFormFieldOrFieldset } from \"./types\";\nimport ActionFormFieldGroup from \"./action-form\";\n\nexport function randomId(prefix = \"\"): string {\n\treturn `${prefix ? prefix + \"-\" : \"\"}${Math.random().toString(36).substring(2, 9)}`;\n}\n\nexport function isField(el: Element | null | undefined): el is HTMLFormField {\n\treturn !!el && (el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement);\n}\n\nexport function isFieldOrGroup(el: Element | null | undefined): el is HTMLFormFieldOrGroup {\n\treturn !!el && (isField(el) || el instanceof ActionFormFieldGroup);\n}\n\nexport function isHTMLFormElement(el: Element | null | undefined): el is HTMLFormFieldOrFieldset {\n\treturn !!el && (el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement || el instanceof HTMLFieldSetElement);\n}\n","import { randomId, isFieldOrGroup } from \"./helpers\";\n\nexport default class ActionFormError extends HTMLElement {\n\tpublic target: HTMLFormElement | null = null;\n\tprivate readonly shadow = this.attachShadow({ mode: \"open\" });\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprivate addAria(target: HTMLElement) {\n\t\t// skip if target is not a form element or if it already has a matching aria-describedby\n\t\tif (isFieldOrGroup(target)) {\n\t\t\t// get id of this af-error element either from the aria-describedby attribute or from itself or make one\n\t\t\tconst id = target.getAttribute(\"aria-describedby\") || this.getAttribute(\"id\") || randomId(target.id);\n\n\t\t\t// set the id on this element and the aria-describedby\n\t\t\tthis.setAttribute(\"id\", id);\n\t\t\ttarget.setAttribute(\"aria-describedby\", id);\n\t\t}\n\t}\n\n\tpublic connectedCallback(): void {\n\t\t// hide by default\n\t\tthis.style.visibility = \"hidden\";\n\t\t// get target from attribute\n\t\tconst targetId = this.getAttribute(\"for\") || \"\";\n\t\tconst target = targetId ? document.getElementById(targetId) : this.closest(\"label\")?.querySelector(`input, select, textarea`);\n\t\t// get field ID from attribute\n\t\tif (isFieldOrGroup(target)) {\n\t\t\t// Make id and add aria-describedby attribute to the target element\n\t\t\tthis.addAria(target);\n\t\t\t// render the element\n\t\t\tthis.render();\n\t\t}\n\t}\n\n\tstatic get observedAttributes() {\n\t\treturn [\"data-invalid\"];\n\t}\n\n\tpublic attributeChangedCallback(name: string, _oldValue: string, newValue: string) {\n\t\t// console.log(\"changed\", name, oldValue, newValue);\n\t\tif (name === \"data-invalid\" && (newValue === \"pattern\" || newValue === \"required\")) {\n\t\t\t// rerender based on pattern or required\n\t\t\tthis.render(newValue);\n\t\t}\n\t}\n\n\tpublic render(part: \"pattern\" | \"required\" = \"required\") {\n\t\tconst parts = {\n\t\t\trequired: `<slot>Required</slot>`,\n\t\t\tpattern: `<slot name=\"pattern\">Not filled in properly</slot>`,\n\t\t};\n\t\tthis.shadow.innerHTML = parts[part];\n\t}\n}\n","export default class ActionFormFieldGroup extends HTMLElement {\n\tprivate readonly shadow = this.attachShadow({ mode: \"open\" });\n\tprivate internals: ElementInternals = this.attachInternals();\n\tstatic formAssociated = true;\n\tpublic name: string = this.getAttribute(\"name\") || \"\";\n\n\tget min(): number {\n\t\treturn Number(this.getAttribute(\"min\") || 0);\n\t}\n\n\tget max(): number {\n\t\treturn Number(this.getAttribute(\"max\") || Infinity);\n\t}\n\n\tget value(): number {\n\t\tlet values = [];\n\t\tconst fields = this.querySelectorAll(\"input, select, textarea\") as NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n\t\tvalues = Array.from(fields).filter((field) =>\n\t\t\tfield instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(field.type) ? field.checked : field.checkValidity() && field.value\n\t\t);\n\t\treturn values.length;\n\t}\n\n\tset value(value: number) {\n\t\tthis.setAttribute(\"value\", String(value));\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.render();\n\t\tthis.checkValidity();\n\t\tthis.addEventListener(\"change\", (event) => {\n\t\t\t// ignore changes from this element\n\t\t\tif (event.target === this) return;\n\t\t\t// check validity and send change event from this element to trigger error message\n\t\t\tthis.checkValidity();\n\t\t\tthis.dispatchEvent(new Event(\"change\", { bubbles: true, composed: true }));\n\t\t});\n\t}\n\n\tpublic focus() {\n\t\t// override focus event to focus the first field element\n\t\t// not sure why adding eventListener for \"focus\" event didn't work, but this does for my needs\n\t\tconst firstField = this.querySelector(\"input, select, textarea\") as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\t\tif (firstField) firstField.focus();\n\t}\n\n\tpublic checkValidity(): boolean {\n\t\tconst validity = this.value >= this.min && this.value <= this.max;\n\t\tthis.setValidity(validity);\n\t\treturn validity;\n\t}\n\n\tpublic setValidity(validity: boolean): void {\n\t\tconst flags = validity ? {} : { customError: true };\n\t\tconst message = validity ? \"\" : \"Value is out of range\";\n\t\tthis.internals.setValidity(flags, message);\n\t\tthis.setAttribute(\"validity\", String(validity));\n\t}\n\n\trender() {\n\t\tthis.shadow.innerHTML = `<slot></slot>`;\n\t}\n}\n","import type ActionFormFieldGroup from \"./af-field-group\";\n\nexport default class ActionFormFormGroupCount extends HTMLElement {\n\tpublic afFieldGroup = this.closest(\"af-field-group\") as ActionFormFieldGroup | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.render();\n\t\tthis.afFieldGroup?.addEventListener(\"change\", () => this.render());\n\t}\n\tget value() {\n\t\tif (this.afFieldGroup) {\n\t\t\treturn this.afFieldGroup.value;\n\t\t}\n\t\treturn 0;\n\t}\n\n\trender() {\n\t\tthis.innerHTML = `${this.value.toString()}`;\n\t}\n}\n","import ActionForm from \"./action-form\";\nimport { createEffect } from \"./signals\";\nfunction convertToTitleCase(str: string): string {\n\treturn str\n\t\t.replace(/[-_](.)/g, function (match) {\n\t\t\treturn \" \" + match.charAt(1).toUpperCase();\n\t\t})\n\t\t.replace(/([a-z])([A-Z])/g, \"$1 $2\")\n\t\t.replace(/^./, function (match) {\n\t\t\treturn match.toUpperCase();\n\t\t});\n}\n\nexport default class ActionFormPreview extends HTMLElement {\n\tprivate actionForm!: ActionForm;\n\n\tconnectedCallback() {\n\t\tconst actionForm = this.closest(\"action-form\");\n\t\tif (actionForm && actionForm instanceof ActionForm) {\n\t\t\tthis.actionForm = actionForm;\n\t\t\tconst form = actionForm.querySelector(\"form\");\n\t\t\tif (!form) return;\n\t\t\tcreateEffect(() => {\n\t\t\t\tthis.render(this.actionForm.data.getForm());\n\t\t\t});\n\t\t}\n\t}\n\n\tget ignore(): string[] {\n\t\treturn this.getAttribute(\"ignore\")?.split(\",\") || [];\n\t}\n\n\trender(data: Record<string, FormDataEntryValue[]> | FormDataEntryValue[] | null) {\n\t\t// console.log(\"af-preview render\", data);\n\n\t\tconst valuesToText = (values: FormDataEntryValue[]) => {\n\t\t\treturn values\n\t\t\t\t.map((value) => {\n\t\t\t\t\tif (typeof value === \"string\") return value;\n\t\t\t\t\treturn \"FILE\";\n\t\t\t\t})\n\t\t\t\t.toString();\n\t\t};\n\n\t\tif (data && !Array.isArray(data)) {\n\t\t\tthis.innerHTML = `<ul>${Object.entries(data)\n\t\t\t\t.filter(([key]) => !this.ignore.includes(key))\n\t\t\t\t.map(([key, values]) => `<li><strong>${this.hasAttribute(\"title-case\") ? convertToTitleCase(key) : key}</strong>: ${valuesToText(values)}</li>`)\n\t\t\t\t.join(\"\")}</ul>`;\n\t\t}\n\t}\n}\n","export default class ActionFormTextCount extends HTMLElement {\n\tprivate getNumber(field: HTMLInputElement | HTMLTextAreaElement) {\n\t\tconst maxlength = Number(field.getAttribute(\"maxlength\") || Infinity);\n\t\tthis.textContent = String(this.hasAttribute(\"remaining\") ? maxlength - field.value.length : field.value.length);\n\t}\n\n\tconnectedCallback() {\n\t\tconst targetId = this.getAttribute(\"for\");\n\t\tconst input = targetId ? document.getElementById(targetId) : this.closest(\"label\")?.querySelector(`input, textarea`);\n\t\tif (input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement) {\n\t\t\tthis.getNumber(input);\n\t\t\tinput.addEventListener(\"input\", () => this.getNumber(input));\n\t\t}\n\t}\n}\n","import { createSignal } from \"./signals\";\n\nexport function formSignals(form: HTMLFormElement) {\n\tconst map = new Map<string, { get: () => FormDataEntryValue[]; set: (value: FormDataEntryValue[]) => void }>();\n\n\t// Save form data\n\tconst [getForm, setFormData] = createSignal<Record<string, FormDataEntryValue[]>>(formDataObject());\n\n\tfunction setForm() {\n\t\tsetFormData(formDataObject());\n\t}\n\n\tfunction set(key: string) {\n\t\tconst values = getValues(key);\n\t\tif (map.has(key)) {\n\t\t\t// @ts-expect-error already checked if key is exists\n\t\t\tmap.get(key).set(values);\n\t\t} else {\n\t\t\tconst [get, set] = createSignal(values);\n\t\t\tmap.set(key, { get, set });\n\t\t}\n\t}\n\n\tfunction get(key: string) {\n\t\treturn map.get(key)?.get();\n\t}\n\n\tfunction getValues(name: string) {\n\t\treturn new FormData(form).getAll(name);\n\t}\n\n\tfunction formDataObject() {\n\t\tconst keys = new FormData(form).keys();\n\t\tconst tempObject: Record<string, FormDataEntryValue[]> = {};\n\t\tArray.from(keys).forEach((key) => {\n\t\t\ttempObject[key] = getValues(key);\n\t\t});\n\t\treturn tempObject;\n\t}\n\n\treturn {\n\t\tget,\n\t\tset,\n\t\tgetForm,\n\t\tsetForm,\n\t\tgetValues,\n\t\tformDataObject,\n\t};\n}\n","export type StepEvent = (data: { index: number; currentStep: HTMLElement }) => void;\n\nimport { createSignal } from \"./signals\";\nimport ActionFormStep from \"./af-step\";\n\nexport function stepSignals(afSteps: NodeListOf<ActionFormStep>) {\n\t// create signal with initial step index and the first step\n\tconst [stepIndex, setStepIndex] = createSignal(0);\n\tconst [currentStep, setCurrentStep] = createSignal(getVisible()[0]);\n\tconst [stepsLength, setStepsLength] = createSignal(getVisible().length);\n\n\tfunction getVisible() {\n\t\treturn Array.from(afSteps).filter((step) => step.style.display !== \"none\");\n\t}\n\n\tfunction updateSteps() {\n\t\tsetStepsLength(getVisible().length);\n\t}\n\n\tfunction set(number: number = 0) {\n\t\tsetStepIndex(number);\n\t\tsetCurrentStep(getVisible()[number]);\n\t}\n\n\tfunction move(numberOfSteps: number = 0) {\n\t\tconst currentIndex = stepIndex();\n\t\tconst index = Math.max(0, Math.min(currentIndex + numberOfSteps, getVisible().length - 1));\n\t\tif (index === currentIndex) return;\n\t\tset(index);\n\t}\n\n\tfunction prev() {\n\t\tmove(-1);\n\t}\n\n\tfunction next() {\n\t\t// Check for invalid fields before moving to next step\n\t\tconst invalid = currentStep().querySelector(\":invalid:not(fieldset)\");\n\t\tif (invalid instanceof HTMLElement) {\n\t\t\t// focus on the first element that is invalid\n\t\t\tinvalid.focus();\n\t\t\t// dispatch change event to trigger subscribed toggleError method\n\t\t\tinvalid.dispatchEvent(new Event(\"change\", { bubbles: true, composed: true }));\n\t\t} else {\n\t\t\tmove(1);\n\t\t}\n\t}\n\n\treturn {\n\t\tall: afSteps,\n\t\t// function which updates when called\n\t\tgetVisible,\n\t\t// reactive current step element\n\t\tcurrentStep,\n\t\t// reactive step index\n\t\tstepIndex,\n\t\t// reactive steps length of visible steps\n\t\tstepsLength,\n\t\t// update stepsLength\n\t\tupdateSteps,\n\t\t// set reactive step index and reactive current step\n\t\tset,\n\t\t// move a number of steps forward or backward\n\t\tmove,\n\t\t// move to previous step\n\t\tprev,\n\t\t// move to next step\n\t\tnext,\n\t};\n}\n","// Child components\n// all child elements are defined at the bottom\nimport ActionFormStep from \"./af-step\";\nimport ActionFormProgress from \"./af-progress\";\nimport ActionFormError from \"./af-error\";\nimport ActionFormFieldGroup from \"./af-field-group\";\nimport ActionFormFormGroupCount from \"./af-field-group-count\"; // alias for ActionFormFieldGroupCount\nimport ActionFormPreview from \"./af-preview\";\nimport ActionFormTextCount from \"./af-text-count\";\n// other imports\nimport type { HTMLFormField } from \"./types\";\nimport { formSignals } from \"./reactiveFormData\";\nimport { randomId, isField, isFieldOrGroup } from \"./helpers\";\nimport { stepSignals } from \"./reactiveStepData\";\nimport { createEffect } from \"./signals\";\n\nexport default class ActionForm extends HTMLElement {\n\tpublic form = (this.querySelector(\"form\") as HTMLFormElement) || null;\n\n\t/* ----------------------------- Create storeKey ---------------------------- */\n\t// Store key is based on the store attribute or if not defined then ids or random values\n\tpublic store: string | null = this.getAttribute(\"store\");\n\n\t/* -------- Persisted fields are ones that are maintained thru reset -------- */\n\tprivate persistedFields: HTMLFormField[] = [];\n\n\t/* --------------------------- Reactive form data --------------------------- */\n\t// used for error triggers and data-if and data-text\n\tpublic data = formSignals(this.form);\n\n\t/* ----------------------------- Reactive steps ----------------------------- */\n\tpublic steps = stepSignals(this.querySelectorAll(\"af-step\") as NodeListOf<ActionFormStep>);\n\n\t// export for use by others\n\tpublic createEffect = createEffect;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst form = this.form;\n\t\tif (form) {\n\t\t\t/*\n\t\t\t * Set novalidate on the form if novalidate set on action-form.\n\t\t\t * This way novalidate is only set if javascript is loaded and form-action is defined.\n\t\t\t * We want to allow falling back to browser validation if javascript is not loaded.\n\t\t\t */\n\t\t\tif (this.hasAttribute(\"novalidate\")) {\n\t\t\t\tform.setAttribute(\"novalidate\", \"\");\n\t\t\t}\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                                Local Storage                               */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t/* --------------------- Make array of persisted fields --------------------- */\n\t\t\tthis.persistedFields = Array.from(this.querySelectorAll(\"[data-persist]\")).filter((el) => isField(el)) as HTMLFormField[];\n\n\t\t\t/* ----------------- Restore form values if store is enabled ---------------- */\n\t\t\tif (this.store) {\n\t\t\t\tthis.restoreFieldValues();\n\t\t\t}\n\n\t\t\t/* ------------------- Listen for storage events to update ------------------ */\n\t\t\twindow.addEventListener(\"storage\", (event) => {\n\t\t\t\tthis.log(\"storage\", event, event.key);\n\n\t\t\t\tif (this.hasAttribute(\"store-listen\") && event.key === this.store) {\n\t\t\t\t\tthis.restoreFieldValues();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                               Set up af-steps                              */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t/* --------- create effect to set the active step and the step index -------- */\n\n\t\t\tcreateEffect(() => {\n\t\t\t\tthis.log(\"ðŸ«¨ create effect ~ action-form: step activation\");\n\t\t\t\tconst currentStep = this.steps.currentStep();\n\t\t\t\tthis.steps.all.forEach((step) => {\n\t\t\t\t\tif (step === currentStep) {\n\t\t\t\t\t\tstep.classList.add(\"active\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstep.classList.remove(\"active\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*              Add ids as needed to all fieldsets and fields                 */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t// Create array of all fieldGroups and fields that require validation\n\t\t\tconst fieldGroups = Array.from(this.querySelectorAll(\"af-field-group\")) as Array<ActionFormFieldGroup>;\n\t\t\tconst validationFields = Array.from(this.querySelectorAll(\"[required],[pattern],[type=phone],[type=email],[type=url],[minlength],[maxlength]\")) as Array<HTMLFormField>;\n\n\t\t\t[...fieldGroups, ...validationFields].forEach((el) => {\n\t\t\t\tif (!el.id) {\n\t\t\t\t\tel.id = randomId(`${el.tagName.toLowerCase()}${el.name ? `-${el.name}` : \"\"}`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*      If auto-error, add af-error to all fields that require validation     */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t// Find all fields that require validation error messages\n\t\t\tif (this.hasAttribute(\"auto-error\")) {\n\t\t\t\tvalidationFields.forEach((field) => {\n\t\t\t\t\t// ignore if field has aria-describedby attribute as that means it already has an error message\n\t\t\t\t\tif (field.hasAttribute(\"aria-describedby\")) return;\n\n\t\t\t\t\t// Check if there is an af-error attribute for the field, either by id or withing parent label\n\t\t\t\t\tconst errorById = form.querySelector(`af-error[for=\"${field.id}\"]`);\n\t\t\t\t\tconst errorByProximity = field.closest(\"label\")?.querySelector(`af-error`);\n\t\t\t\t\tif (!errorById && !errorByProximity) {\n\t\t\t\t\t\tfield.after(this.createAfError(field));\n\t\t\t\t\t\t// NOTE: the af-error component will add it's own id and the aria-describedby attribute\n\t\t\t\t\t\tthis.log(`Added Error Message for ${field.id}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// Find all fieldsets with data-group that don't have an aria-describedby\n\t\t\t\tfieldGroups.forEach((fieldGroup) => {\n\t\t\t\t\t// ignore if fieldset has aria-describedby attribute as that means it already has an error message\n\t\t\t\t\tif (fieldGroup.hasAttribute(\"aria-describedby\")) return;\n\n\t\t\t\t\t// search for any matching af-error messages\n\t\t\t\t\tconst afError = fieldGroup.querySelector(`af-error[for=\"${fieldGroup.id}\"]`);\n\t\t\t\t\t// if no error message found, create one\n\t\t\t\t\tif (!afError) {\n\t\t\t\t\t\tfieldGroup.append(this.createAfError(fieldGroup));\n\t\t\t\t\t\tthis.log(`Added Error Message for ${fieldGroup.id}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                      Reactive form state management                        */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t/* --- Set up reactive form state management with all field names as keys --- */\n\n\t\t\t// 1. Create keys from names of all field elements\n\t\t\tconst keys = new Set(\n\t\t\t\tArray.from(form.elements)\n\t\t\t\t\t.map((el) => {\n\t\t\t\t\t\t// @ts-expect-error checking for name\n\t\t\t\t\t\treturn el.name || \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.filter((name) => name)\n\t\t\t);\n\n\t\t\t// 2. Set up data with all field element names\n\t\t\tkeys.forEach((key) => {\n\t\t\t\tthis.data.set(key);\n\t\t\t});\n\n\t\t\t/* -------------- Change event listener which triggers data.set ------------- */\n\n\t\t\tform.addEventListener(\"change\", (e) => {\n\t\t\t\t// trigger any events mapped to the form\n\t\t\t\tconst target = e.target;\n\t\t\t\tif (target instanceof HTMLElement) {\n\t\t\t\t\t// @ts-expect-error this is an if on purpose\n\t\t\t\t\tif (target.name) {\n\t\t\t\t\t\t// @ts-expect-error checking for name\n\t\t\t\t\t\t// 1. trigger any events mapped to name of the field\n\t\t\t\t\t\tthis.data.set(target.name);\n\t\t\t\t\t\t// 2. trigger any general events (mapped to the form element)\n\t\t\t\t\t\tthis.data.setForm();\n\t\t\t\t\t}\n\t\t\t\t\t// 3. Store the data if store is set\n\t\t\t\t\tif (this.store) localStorage.setItem(this.store, JSON.stringify(this.data.formDataObject()));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*    Add effect to all fields and af-field-group to check toggle errors      */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\t[...validationFields, ...fieldGroups].forEach((el) => {\n\t\t\t\t// create effect to check all fields that require validation to toggle errors\n\t\t\t\tcreateEffect(() => {\n\t\t\t\t\tthis.log(\"ðŸ«¨ create effect ~ action-form: error checking\");\n\t\t\t\t\tthis.data.get(el.name);\n\t\t\t\t\tthis.toggleError(el);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                           Enhance normal elements                          */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/* ---------------------- Set up data-if and data-text ---------------------- */\n\t\t\tconst enhancedElements = this.querySelectorAll(\"[data-if],[data-text]\");\n\n\t\t\tenhancedElements.forEach((el) => {\n\t\t\t\tif (el instanceof HTMLElement) {\n\t\t\t\t\tconst dataIf = el.dataset.if;\n\t\t\t\t\tconst dataText = el.dataset.text;\n\t\t\t\t\t// 1. create effect for data-if and data-text\n\t\t\t\t\tcreateEffect(() => {\n\t\t\t\t\t\tthis.log(\"ðŸ«¨ create effect: action-form: enhance elements\");\n\t\t\t\t\t\tif (dataIf) {\n\t\t\t\t\t\t\tconst fieldValues = this.data.get(dataIf);\n\t\t\t\t\t\t\tif (fieldValues) {\n\t\t\t\t\t\t\t\tconst value = el.dataset.ifValue;\n\t\t\t\t\t\t\t\tconst notValue = el.dataset.ifNotValue;\n\t\t\t\t\t\t\t\tconst regexStr = el.dataset.ifRegex;\n\t\t\t\t\t\t\t\tconst regex: RegExp | undefined = regexStr ? new RegExp(regexStr) : undefined;\n\t\t\t\t\t\t\t\tif (value || notValue || regex) {\n\t\t\t\t\t\t\t\t\t// matches checks if any of the values are equal to the ifValue or if it matches via regex to the ifRegex if none of the values equal the notValue\n\t\t\t\t\t\t\t\t\tconst matches =\n\t\t\t\t\t\t\t\t\t\tfieldValues.some((d) => typeof d === \"string\" && ((value && d === value) || (regex && regex.test(d)))) &&\n\t\t\t\t\t\t\t\t\t\tfieldValues.every((d) => typeof d === \"string\" && (!notValue || d !== notValue));\n\t\t\t\t\t\t\t\t\t// this.log(\"matches\", watch, value, matches, data);\n\t\t\t\t\t\t\t\t\tthis.show(el, matches);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// if there is no ifValue, ifNotValue or ifRegex then just show the element as long as there is at least some value\n\t\t\t\t\t\t\t\t\tthis.show(el, !!fieldValues.some((d) => !!d));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dataText) {\n\t\t\t\t\t\t\tconst fieldValues = this.data.get(dataText);\n\t\t\t\t\t\t\tif (fieldValues) {\n\t\t\t\t\t\t\t\tel.textContent = fieldValues?.toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                            Override reset button                           */\n\t\t\t/* -------------------------------------------------------------------------- */\n\n\t\t\tconst resetButtons = this.querySelectorAll(\"button[type=reset]\");\n\t\t\t// There is a specific order to resetting that needs done so as to not reset persisted fields\n\t\t\tresetButtons.forEach((resetBtn) => {\n\t\t\t\tresetBtn.addEventListener(\"click\", (event) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t// store the persisted fields values (works with out localStorage being enabled)\n\t\t\t\t\tthis.persistedFields.forEach((persistField) => (isField(persistField) ? (persistField.dataset.persist = persistField.value) : null));\n\t\t\t\t\t// reset the form\n\t\t\t\t\tthis.form.reset();\n\t\t\t\t\t// restore the persisted fields\n\t\t\t\t\tthis.persistedFields.forEach((persistField) =>\n\t\t\t\t\t\tisField(persistField) && typeof persistField.dataset.persist === \"string\" ? (persistField.value = persistField.dataset.persist) : null\n\t\t\t\t\t);\n\t\t\t\t\t// restore the form to initial state; resetting store to only persisted fields and setting step to 0\n\t\t\t\t\tthis.restoreForm();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\t/*                       Validate form before submitting                      */\n\t\t\t/* -------------------------------------------------------------------------- */\n\t\t\tthis.addEventListener(\"submit\", (e) => {\n\t\t\t\t// Validate form before submitting\n\t\t\t\tconst formValid = form.checkValidity();\n\t\t\t\tif (!formValid) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tconst invalidField = this.form.querySelector(\":invalid:not(fieldset)\");\n\t\t\t\t\t// if there is an invalid field, focus on it and highlight the error by triggering the change event\n\t\t\t\t\tif (invalidField && invalidField instanceof HTMLElement) {\n\t\t\t\t\t\t// find parent af-step element\n\t\t\t\t\t\tconst parentStep = invalidField.closest(\"af-step\");\n\t\t\t\t\t\t// find index of parent step\n\t\t\t\t\t\t// const stepIndex: number = 0;\n\t\t\t\t\t\tconst stepIndex = this.steps.getVisible().findIndex((step) => step === parentStep);\n\t\t\t\t\t\t// set step index\n\t\t\t\t\t\tif (stepIndex !== -1) {\n\t\t\t\t\t\t\t// got to step index\n\t\t\t\t\t\t\tthis.steps.set(stepIndex);\n\t\t\t\t\t\t\t// trigger next which will find error\n\t\t\t\t\t\t\tthis.steps.next();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(`Invalid field: ${invalidField.id}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// If form is valid then erase the stored values except for persisted fields\n\t\t\t\t\tthis.restoreForm();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate createAfError(el: ActionFormFieldGroup | HTMLFormField): ActionFormError {\n\t\tconst afError = document.createElement(\"af-error\") as ActionFormError;\n\t\tafError.setAttribute(\"for\", el.id);\n\t\tafError.textContent = el.dataset.error || \"\";\n\t\tif (el.dataset.errorPattern) {\n\t\t\tconst pattern = document.createElement(\"span\");\n\t\t\tpattern.setAttribute(\"slot\", \"pattern\");\n\t\t\tpattern.textContent = el.dataset.errorPattern;\n\t\t\tafError.append(pattern);\n\t\t}\n\t\treturn afError;\n\t}\n\n\tprivate toggleError(el: HTMLFormField | ActionFormFieldGroup) {\n\t\tconst errorMsg = document.getElementById(el.getAttribute(\"aria-describedby\") || \"\");\n\t\tif (errorMsg && typeof el.checkValidity === \"function\") {\n\t\t\tconst valid = el.checkValidity();\n\t\t\tthis.log(\"errorMsg.id, valid\", errorMsg.id, valid);\n\t\t\tif (valid) {\n\t\t\t\tthis.resetError(el, errorMsg);\n\t\t\t} else {\n\t\t\t\terrorMsg.style.visibility = \"visible\";\n\t\t\t\tel.setAttribute(\"aria-invalid\", \"true\");\n\t\t\t\terrorMsg.dataset.invalid = el.value === \"\" ? \"required\" : \"pattern\";\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resetError(el: HTMLFormField | ActionFormFieldGroup, errorMsg: HTMLElement) {\n\t\tel.removeAttribute(\"aria-invalid\");\n\t\terrorMsg.style.visibility = \"hidden\";\n\t\terrorMsg.removeAttribute(\"data-invalid\");\n\t}\n\n\tprivate restoreForm() {\n\t\t// Remove store except for persisted fields\n\t\tthis.resetStore();\n\n\t\t// Reset all elements and their error messages\n\t\tconst erroredElements = this.querySelectorAll(\"[aria-invalid]\");\n\t\terroredElements.forEach((el) => {\n\t\t\tif (isFieldOrGroup(el)) {\n\t\t\t\tconst errorMsg = document.getElementById(el.getAttribute(\"aria-describedby\") || \"\");\n\t\t\t\tif (errorMsg) this.resetError(el, errorMsg);\n\t\t\t}\n\t\t});\n\n\t\t// Move back to step 0\n\t\t// this.step.set(0);\n\t}\n\n\tprivate resetStore() {\n\t\tif (!this.store) return;\n\t\t// Remove store except for persisted fields\n\t\tconst ls = localStorage.getItem(this.store);\n\t\t// If there are persisted field then maintain them\n\t\tif (ls && this.persistedFields.length > 0) {\n\t\t\tconst values = JSON.parse(ls) as Record<string, string | string[]>;\n\t\t\tObject.keys(values).forEach((key) => {\n\t\t\t\tif (this.persistedFields.every((field) => field.name !== key)) {\n\t\t\t\t\tdelete values[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\t// set store with only persisted fields\n\t\t\tlocalStorage.setItem(this.store, JSON.stringify(values));\n\t\t} else {\n\t\t\tlocalStorage.removeItem(this.store);\n\t\t}\n\t}\n\n\tprivate restoreFieldValues() {\n\t\tif (!this.store) return;\n\t\tconst ls = localStorage.getItem(this.store);\n\t\tif (!ls || ls === \"undefined\") return;\n\t\tconst values = JSON.parse(ls) as Record<string, string | string[]>;\n\t\tif (typeof values !== \"object\") return;\n\t\t// Cycle through fields based on name\n\t\tObject.keys(values).forEach((key) => {\n\t\t\tconst fields = this.querySelectorAll(`[name=\"${key}\"]`);\n\t\t\tfields.forEach((el) => {\n\t\t\t\tif (isField(el) && !el.matches(\"[type=hidden]\")) {\n\t\t\t\t\t// if this is a checkbox or radio button\n\t\t\t\t\tif (el instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(el.type) && values[key] instanceof Array) {\n\t\t\t\t\t\t// set checked based on value in array\n\t\t\t\t\t\tel.checked = values[key].includes(el.value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// set value\n\t\t\t\t\t\tel.value = String(values[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate show(el: HTMLElement, show: boolean): void {\n\t\t// this.log(\"show\", el, show);\n\t\tif (show) {\n\t\t\tel.style.display = \"\";\n\t\t\tel.removeAttribute(\"disabled\");\n\t\t} else {\n\t\t\tel.style.display = \"none\";\n\t\t\tel.setAttribute(\"disabled\", \"\");\n\t\t}\n\t\tel.dispatchEvent(new Event(\"change\", { bubbles: true }));\n\t\tif (el.matches(\"af-step\")) this.steps.updateSteps();\n\t\tif (el.matches(\"fieldset\")) {\n\t\t\t// if this is a fieldset, set all named events so that errors, data-if and data-text events can be updated\n\t\t\tconst fields = el.querySelectorAll(\"input, select, textarea\") as NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n\t\t\tfields.forEach((field) => {\n\t\t\t\t// console.log(\"show notify\", field.name);\n\t\t\t\tthis.data.set(field.name);\n\t\t\t});\n\t\t}\n\t}\n\n\t// eslint-disable-next-line\n\tprivate log(...args: any[]): void {\n\t\t// eslint-disable-next-line no-console\n\t\tif (this.hasAttribute(\"debug\")) console.log(...args);\n\t}\n\n\t// public connectedCallback(): void {\n\t// \tthis.log(\"connected\");\n\t// }\n\n\t// public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t// \tthis.log(\"changed\", name, oldValue, newValue);\n\t// }\n}\n\ncustomElements.define(\"action-form\", ActionForm);\n\n// Define imported elements that are required by this component\ncustomElements.define(\"af-error\", ActionFormError);\ncustomElements.define(\"af-step\", ActionFormStep);\ncustomElements.define(\"af-progress\", ActionFormProgress);\ncustomElements.define(\"af-field-group\", ActionFormFieldGroup);\ncustomElements.define(\"af-field-group-count\", ActionFormFormGroupCount);\ncustomElements.define(\"af-text-count\", ActionFormTextCount);\ncustomElements.define(\"af-preview\", ActionFormPreview);\n"],"names":["context","createSignal","value","subscriptions","observer","newValue","createEffect","fn","effect","ActionFormStep","__publicField","actionForm","internals","e","target","direction","_a","el","c","nav","stepButton","title","btn","ActionFormProgress","step","stepsLength","stepIndex","progressPercentage","style","index","active","valid","disabled","randomId","prefix","isField","isFieldOrGroup","ActionFormFieldGroup","ActionFormError","id","targetId","name","_oldValue","part","parts","event","values","fields","field","firstField","validity","flags","message","ActionFormFormGroupCount","convertToTitleCase","str","match","ActionFormPreview","ActionForm","data","valuesToText","key","ActionFormTextCount","maxlength","input","formSignals","form","map","getForm","setFormData","formDataObject","setForm","set","getValues","get","keys","tempObject","stepSignals","afSteps","setStepIndex","currentStep","setCurrentStep","getVisible","setStepsLength","updateSteps","number","move","numberOfSteps","currentIndex","prev","next","invalid","fieldGroups","validationFields","errorById","errorByProximity","fieldGroup","dataIf","dataText","fieldValues","notValue","regexStr","regex","matches","d","resetBtn","persistField","invalidField","parentStep","afError","pattern","errorMsg","ls","show","args"],"mappings":"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"}