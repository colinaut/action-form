{"version":3,"file":"action-form.js","sources":["../src/action-form.ts"],"sourcesContent":["import ActionFormStep from \"./af-step\";\nexport default class ActionForm extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tdocument.documentElement.classList.add(\"js\");\n\n\t\tif (this.form) {\n\t\t\t/*\n\t\t\t * Set novalidate on the form if novalidate set on action-form.\n\t\t\t * This way novalidate is only set if javascript is loaded and form-action is defined.\n\t\t\t * We want to allow falling back to browser validation if javascript is not loaded.\n\t\t\t */\n\t\t\tif (this.hasAttribute(\"novalidate\")) {\n\t\t\t\tthis.form.setAttribute(\"novalidate\", \"\");\n\t\t\t}\n\n\t\t\tthis.setAttribute(\"loaded\", \"\");\n\n\t\t\tthis.enhanceFieldsets();\n\n\t\t\tthis.steps.forEach((step, i) => {\n\t\t\t\t// need to add as attribute rather than set directly as the setter is not called until element is loaded\n\t\t\t\tif (i === 0) step.setAttribute(\"active\", \"\"); // active = i === 0;\n\t\t\t});\n\n\t\t\tthis.addEventListener(\"af-step\", (event) => {\n\t\t\t\tconst customEvent = event as CustomEvent<{ step: number | undefined }>;\n\t\t\t\tconsole.log(\"af-step\", customEvent.detail?.step);\n\t\t\t\tif (customEvent.detail?.step === undefined) return;\n\t\t\t\tthis.stepIndex = customEvent.detail.step;\n\t\t\t\tthis.steps.forEach((step, i) => {\n\t\t\t\t\t// if current step is valid, set completed\n\t\t\t\t\tif (step.active) step.completed = step.valid;\n\t\t\t\t\t// set active based on index\n\t\t\t\t\tstep.active = i === this.stepIndex;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.addEventListener(\"change\", () => {\n\t\t\t\tconst formData = this.form && new FormData(this.form);\n\t\t\t\tif (!formData) return;\n\n\t\t\t\tthis.watchers.forEach((watcher) => {\n\t\t\t\t\tconst values = formData.getAll(watcher.name);\n\t\t\t\t\tconst valid = values.some((value) => typeof value === \"string\" && (value === watcher.value || (watcher.regex && watcher.regex.test(value))));\n\t\t\t\t\t// if it is hidden and it is invalid, or vice versa, that means the state is fine so return.\n\t\t\t\t\tif (watcher.el.hasAttribute(\"hidden\") !== valid) return;\n\t\t\t\t\tconsole.log(\"watcher\", watcher.name, valid);\n\t\t\t\t\t// Else show/hide it\n\t\t\t\t\tthis.show(watcher.el, valid);\n\t\t\t\t\t// if this is af-step then trigger event to update progress bar\n\t\t\t\t\tif (watcher.el.matches(\"af-step\")) this.dispatchEvent(new CustomEvent(\"af-step\"));\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tget steps(): NodeListOf<ActionFormStep> {\n\t\treturn this.querySelectorAll(\"af-step:not([hidden])\") as NodeListOf<ActionFormStep>;\n\t}\n\n\tpublic form = this.querySelector(\"form\");\n\tpublic stepIndex: number = 0; // current step\n\tpublic fieldsets: NodeListOf<HTMLFieldSetElement> = this.querySelectorAll(\"fieldset, af-step\");\n\tpublic formElements: NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> = this.querySelectorAll(\"input, select, textarea\");\n\n\tprivate watchers: { name: string; el: HTMLElement; value?: string; regex?: RegExp }[] = [];\n\n\tprivate enhanceFieldsets() {\n\t\tthis.fieldsets.forEach((fieldset) => {\n\t\t\tconst watch = fieldset.dataset.watch;\n\t\t\tconst value = fieldset.dataset.value;\n\t\t\tconst regex = fieldset.dataset.regex ? new RegExp(fieldset.dataset.regex) : undefined;\n\t\t\tif (watch) {\n\t\t\t\tthis.watchers.push({ name: watch, value, regex, el: fieldset });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate show(el: HTMLElement, show: boolean): void {\n\t\tif (show) {\n\t\t\tel.removeAttribute(\"hidden\");\n\t\t\tel.removeAttribute(\"disabled\");\n\t\t} else {\n\t\t\tel.setAttribute(\"hidden\", \"\");\n\t\t\tel.setAttribute(\"disabled\", \"\");\n\t\t}\n\t}\n\n\tpublic connectedCallback(): void {\n\t\tconsole.log(\"connected\");\n\t}\n\n\t// public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n\t// \tconsole.log(\"changed\", name, oldValue, newValue);\n\t// }\n}\ncustomElements.define(\"action-form\", ActionForm);\n"],"names":["ActionForm","__publicField","step","i","event","_a","_b","customEvent","formData","watcher","valid","value","fieldset","watch","regex","el","show"],"mappings":"wKACA,MAAqBA,UAAmB,WAAY,CACnD,aAAc,CACP,QA0DAC,EAAA,YAAO,KAAK,cAAc,MAAM,GAChCA,EAAA,iBAAoB,GACpBA,EAAA,iBAA6C,KAAK,iBAAiB,mBAAmB,GACtFA,EAAA,oBAAuF,KAAK,iBAAiB,yBAAyB,GAErIA,EAAA,gBAAgF,CAAA,GA9D9E,SAAA,gBAAgB,UAAU,IAAI,IAAI,EAEvC,KAAK,OAMJ,KAAK,aAAa,YAAY,GAC5B,KAAA,KAAK,aAAa,aAAc,EAAE,EAGnC,KAAA,aAAa,SAAU,EAAE,EAE9B,KAAK,iBAAiB,EAEtB,KAAK,MAAM,QAAQ,CAACC,EAAMC,IAAM,CAE3BA,IAAM,GAAQD,EAAA,aAAa,SAAU,EAAE,CAAA,CAC3C,EAEI,KAAA,iBAAiB,UAAYE,GAAU,CAxB/C,IAAAC,EAAAC,EAyBI,MAAMC,EAAcH,EACpB,QAAQ,IAAI,WAAWC,EAAAE,EAAY,SAAZ,YAAAF,EAAoB,IAAI,IAC3CC,EAAAC,EAAY,SAAZ,YAAAD,EAAoB,QAAS,SAC5B,KAAA,UAAYC,EAAY,OAAO,KACpC,KAAK,MAAM,QAAQ,CAACL,EAAMC,IAAM,CAE3BD,EAAK,SAAQA,EAAK,UAAYA,EAAK,OAElCA,EAAA,OAASC,IAAM,KAAK,SAAA,CACzB,EAAA,CACD,EAEI,KAAA,iBAAiB,SAAU,IAAM,CACrC,MAAMK,EAAW,KAAK,MAAQ,IAAI,SAAS,KAAK,IAAI,EAC/CA,GAEA,KAAA,SAAS,QAASC,GAAY,CAElC,MAAMC,EADSF,EAAS,OAAOC,EAAQ,IAAI,EACtB,KAAME,GAAU,OAAOA,GAAU,WAAaA,IAAUF,EAAQ,OAAUA,EAAQ,OAASA,EAAQ,MAAM,KAAKE,CAAK,EAAG,EAEvIF,EAAQ,GAAG,aAAa,QAAQ,IAAMC,IAC1C,QAAQ,IAAI,UAAWD,EAAQ,KAAMC,CAAK,EAErC,KAAA,KAAKD,EAAQ,GAAIC,CAAK,EAEvBD,EAAQ,GAAG,QAAQ,SAAS,GAAG,KAAK,cAAc,IAAI,YAAY,SAAS,CAAC,EAAA,CAChF,CAAA,CACD,EAEH,CAEA,IAAI,OAAoC,CAChC,OAAA,KAAK,iBAAiB,uBAAuB,CACrD,CASQ,kBAAmB,CACrB,KAAA,UAAU,QAASG,GAAa,CAC9B,MAAAC,EAAQD,EAAS,QAAQ,MACzBD,EAAQC,EAAS,QAAQ,MACzBE,EAAQF,EAAS,QAAQ,MAAQ,IAAI,OAAOA,EAAS,QAAQ,KAAK,EAAI,OACxEC,GACE,KAAA,SAAS,KAAK,CAAE,KAAMA,EAAO,MAAAF,EAAO,MAAAG,EAAO,GAAIF,CAAA,CAAU,CAC/D,CACA,CACF,CAEQ,KAAKG,EAAiBC,EAAqB,CAC9CA,GACHD,EAAG,gBAAgB,QAAQ,EAC3BA,EAAG,gBAAgB,UAAU,IAE1BA,EAAA,aAAa,SAAU,EAAE,EACzBA,EAAA,aAAa,WAAY,EAAE,EAEhC,CAEO,mBAA0B,CAChC,QAAQ,IAAI,WAAW,CACxB,CAKD,CACA,eAAe,OAAO,cAAef,CAAU"}