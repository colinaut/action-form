{"version":3,"file":"af-step.js","sources":["../src/af-progress.ts","../src/af-step.ts"],"sourcesContent":["import type ActionForm from \"./action-form\";\nimport { createEffect } from \"./signals\";\nexport default class ActionFormProgress extends HTMLElement {\n\tprivate shadow: ShadowRoot;\n\n\tprivate actionForm!: ActionForm;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.shadow = this.attachShadow({ mode: \"open\" });\n\n\t\tconst actionForm = this.closest(\"action-form\") as ActionForm | null;\n\t\tif (actionForm && actionForm.steps.all.length > 0) {\n\t\t\tthis.actionForm = actionForm;\n\t\t\tthis.shadow.addEventListener(\"click\", (e) => {\n\t\t\t\tconst target = e.target;\n\t\t\t\tif (this.actionForm && target instanceof HTMLButtonElement && target.matches(\".step\") && !target.disabled) {\n\t\t\t\t\tconst step = Number(target.dataset.index || 0);\n\t\t\t\t\tactionForm.steps.set(step);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* ---- rerender when step is changed or when steps are added or removed ---- */\n\t\t\tcreateEffect(() => {\n\t\t\t\tconst stepsLength = actionForm.steps.stepsLength();\n\t\t\t\tconst stepIndex = actionForm.steps.stepIndex();\n\t\t\t\tconsole.log(\"ðŸ«¨ create effect: af-progress: rerender\", stepsLength, stepIndex);\n\t\t\t\tthis.render(stepsLength, stepIndex);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate render(stepsLength: number, stepIndex: number) {\n\t\tconst progressPercentage = (stepIndex / (stepsLength - 1)) * 100;\n\n\t\t// TODO: simplify this\n\t\tconst style = `\n        <style>\n        :host {\n            display: grid;\n            position: relative;\n            align-items: center;\n            --step-border-size: .22em;\n            --step-bg: white;\n            --step-text: inherit;\n            --inactive: lightgray;\n            --active: lightseagreen;\n            --invalid: coral;\n            --valid: var(--active);\n            --valid-bg: var(--active);\n            --valid-text: white;\n        }\n        .progress {\n            background: var(--active);\n            height: 0.5em;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        nav {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n            display: flex;\n            justify-content: space-between;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        .bg {\n            background: var(--inactive);\n            height: 0.5em;\n            grid-row: -1/1;\n            grid-column: -1/1;\n        }\n        .step {\n            border: var(--step-border-size) solid var(--inactive);\n            border-radius: 100%;\n            width: 2em;\n            height: 2em;\n            line-height: 1.65em;\n            text-align: center;\n            background: var(--step-bg);\n            font-size: 0.9em;\n            position: relative;\n            z-index: 1;\n            padding: 0;\n            margin: 0;\n            cursor: pointer;\n            color: var(--step-text);\n        }\n        .valid:has(~ .active) {\n            border-color: var(--valid);\n            background: var(--valid-bg);\n            color: var(--valid-text);\n        }\n        .step:disabled {\n            opacity: 1;\n            cursor: not-allowed;\n        }\n        .active {\n            border-color: var(--active);\n        }\n        .step:not(.valid):has(~ .active) {\n            border-color: var(--invalid);\n        }\n        </style>\n        `;\n\n\t\t// TODO: add step titles from af-step\n\t\tthis.shadow.innerHTML = `${style}\n        <div class=\"bg\" part=\"bg\"></div>\n        <div class=\"progress\" part=\"progress\" style=\"width: ${progressPercentage}%;\"></div>\n        <nav part=\"nav\">\n        ${Array.from(this.actionForm.steps.getVisible())\n\t\t\t.map((step, index) => {\n\t\t\t\tconst active = index === stepIndex ? \"active\" : \"\";\n\t\t\t\tconst valid = step.valid ? \"valid\" : \"\";\n\t\t\t\tconst disabled = this.hasAttribute(\"enable-all\") || stepIndex > index ? \"\" : \"disabled\";\n\t\t\t\tconst title = step.dataset.title || \"\";\n\t\t\t\treturn `<button type=\"button\" part=\"step ${valid} ${active}\" ${disabled} title=\"${title}\" class=\"step ${valid} ${active}\" ${\n\t\t\t\t\tactive && `aria-current=\"step\"`\n\t\t\t\t} aria-label=\"Step ${index + 1}\" data-index=\"${index}\">${index + 1}</button>`;\n\t\t\t})\n\t\t\t.join(\"\")}\n        </nav>\n        `;\n\t}\n}\n","import type ActionForm from \"./action-form\";\nimport ActionFormProgress from \"./af-progress\";\nimport { createEffect } from \"./signals\";\n\nexport default class ActionFormStep extends HTMLElement {\n\tprivate shadow!: ShadowRoot | null;\n\t// this.this works if component uses Declarative Shadow DOM or not\n\tprivate DOM!: this | ShadowRoot;\n\n\tprivate actionForm!: ActionForm;\n\n\t// Reflected Attributes\n\tget valid(): boolean {\n\t\treturn this.hasAttribute(\"valid\");\n\t}\n\n\tset valid(value: boolean) {\n\t\tif (value) {\n\t\t\tthis.setAttribute(\"valid\", \"\");\n\t\t} else {\n\t\t\tthis.removeAttribute(\"valid\");\n\t\t}\n\t}\n\n\t// Method Getter\n\tget isValid(): boolean {\n\t\treturn this.querySelectorAll(\":invalid\").length === 0;\n\t}\n\n\tprivate getStepTitle(direction: \"prev\" | \"next\"): string {\n\t\tlet el = direction === \"next\" ? this.nextElementSibling : this.previousElementSibling;\n\t\t// Find next element that is visible\n\t\tif (el && el instanceof HTMLElement && el.style.display === \"none\") {\n\t\t\tel = direction === \"next\" ? el.nextElementSibling : el.previousElementSibling;\n\t\t}\n\t\tif (el && el.matches(\"af-step\")) {\n\t\t\t// Return the data.title if it exists, otherwise return data[direction] on the action-form element or return the direction as sentence case\n\t\t\t// @ts-expect-error if it matches then it is the right element\n\t\t\treturn el.dataset.title || this.actionForm?.dataset[direction] || direction.replace(/^\\w/, (c) => c.toUpperCase());\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tget submit() {\n\t\treturn this.actionForm?.dataset.submit || \"Submit\";\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst actionForm = this.closest(\"action-form\") as ActionForm | null;\n\t\tif (actionForm && actionForm.steps.all.length > 0) {\n\t\t\tthis.actionForm = actionForm;\n\t\t\tconst internals = this.attachInternals();\n\t\t\tthis.shadow = internals.shadowRoot;\n\t\t\tthis.DOM = this.shadow || this;\n\n\t\t\t// update validity and completed when change event is fired\n\t\t\tthis.DOM.addEventListener(\"change\", () => {\n\t\t\t\t// console.log(\"af-step change isValid\", event.target, this.isValid);\n\t\t\t\tthis.valid = this.isValid;\n\t\t\t});\n\n\t\t\t// trigger next or prev step\n\t\t\tthis.DOM.addEventListener(\"click\", (e) => {\n\t\t\t\tconst target = e.target;\n\t\t\t\tif (target instanceof HTMLButtonElement) {\n\t\t\t\t\tif (target.dataset.direction === \"next\" || target.dataset.direction === \"prev\") {\n\t\t\t\t\t\tthis.step(target.dataset.direction);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* ----------- update button text when steps are added or removed ----------- */\n\t\t\tcreateEffect(() => {\n\t\t\t\tconsole.log(\"ðŸ«¨ create effect: af-step: update button text\");\n\t\t\t\tactionForm.steps.stepsLength();\n\t\t\t\tthis.setButtonTexts();\n\t\t\t});\n\t\t}\n\n\t\t// this.actionForm?.step.subscribe(() => {\n\t\t// \tthis.setButtonTexts();\n\t\t// });\n\t}\n\n\tpublic step(direction: \"next\" | \"prev\" = \"next\") {\n\t\t// If button is next check if any elements are invalid before moving to next step\n\t\tthis.actionForm?.steps[direction]();\n\t}\n\n\tpublic connectedCallback(): void {\n\t\t// console.log(\"connected\");\n\t\tthis.valid = this.isValid;\n\n\t\t// check for footer\n\t\tconst footer = this.DOM.querySelector(\"slot[name=footer]\") || this.DOM.querySelector(\"[slot=footer]\");\n\n\t\t// add footer if it doesn't exist\n\t\tif (!footer) {\n\t\t\tconst nav = document.createElement(\"nav\");\n\t\t\tnav.classList.add(\"af-step-nav\");\n\t\t\tnav.setAttribute(\"part\", \"step-nav\");\n\t\t\tnav.setAttribute(\"aria-label\", \"Step Navigation\");\n\t\t\tconst stepButton = (direction: \"next\" | \"prev\" = \"next\") => {\n\t\t\t\tconst title = this.getStepTitle(direction);\n\t\t\t\tif (title) {\n\t\t\t\t\treturn `<button type=\"button\" class=\"af-step-${direction}\" data-direction=\"${direction}\" part=\"step-btn ${direction}\">${title}</button>`;\n\t\t\t\t} else if (direction === \"next\") {\n\t\t\t\t\t// no title = last step\n\t\t\t\t\treturn `<button type=\"submit\" part=\"submit\">${this.submit}</button>`;\n\t\t\t\t} else {\n\t\t\t\t\t// no title = first step\n\t\t\t\t\treturn `<span></span>`;\n\t\t\t\t}\n\t\t\t};\n\t\t\tnav.innerHTML = `${stepButton(\"prev\")}${stepButton(\"next\")}`;\n\t\t\tthis.DOM.appendChild(nav);\n\t\t}\n\t}\n\n\tprivate setButtonTexts() {\n\t\tconst queryBtns = this.DOM.querySelectorAll(\"button[data-direction]\") as NodeListOf<HTMLButtonElement>;\n\t\tqueryBtns.forEach((btn) => {\n\t\t\tif (btn.dataset.direction === \"next\" || btn.dataset.direction === \"prev\") {\n\t\t\t\tbtn.textContent = this.getStepTitle(btn.dataset.direction);\n\t\t\t}\n\t\t});\n\t}\n}\n\ncustomElements.define(\"af-step\", ActionFormStep);\n// define progress element here as it is required for step navigation\ncustomElements.define(\"af-progress\", ActionFormProgress);\n"],"names":["ActionFormProgress","__publicField","actionForm","e","target","step","createEffect","stepsLength","stepIndex","progressPercentage","style","index","active","valid","disabled","title","ActionFormStep","internals","value","direction","el","_a","c","nav","stepButton","btn"],"mappings":"yNAEA,MAAqBA,UAA2B,WAAY,CAK3D,aAAc,CACP,QALCC,EAAA,eAEAA,EAAA,mBAIP,KAAK,OAAS,KAAK,aAAa,CAAE,KAAM,OAAQ,EAE1C,MAAAC,EAAa,KAAK,QAAQ,aAAa,EACzCA,GAAcA,EAAW,MAAM,IAAI,OAAS,IAC/C,KAAK,WAAaA,EAClB,KAAK,OAAO,iBAAiB,QAAUC,GAAM,CAC5C,MAAMC,EAASD,EAAE,OACb,GAAA,KAAK,YAAcC,aAAkB,mBAAqBA,EAAO,QAAQ,OAAO,GAAK,CAACA,EAAO,SAAU,CAC1G,MAAMC,EAAO,OAAOD,EAAO,QAAQ,OAAS,CAAC,EAClCF,EAAA,MAAM,IAAIG,CAAI,CAC1B,CAAA,CACA,EAGDC,EAAa,IAAM,CACZ,MAAAC,EAAcL,EAAW,MAAM,YAAY,EAC3CM,EAAYN,EAAW,MAAM,UAAU,EACrC,QAAA,IAAI,0CAA2CK,EAAaC,CAAS,EACxE,KAAA,OAAOD,EAAaC,CAAS,CAAA,CAClC,EAEH,CAEQ,OAAOD,EAAqBC,EAAmB,CAChD,MAAAC,EAAsBD,GAAaD,EAAc,GAAM,IAGvDG,EAAQ,mgCAwET,KAAA,OAAO,UAAY,GAAGA,CAAK;AAAA;AAAA,8DAE4BD,CAAkB;AAAA;AAAA,UAEtE,MAAM,KAAK,KAAK,WAAW,MAAM,WAAW,CAAC,EACnD,IAAI,CAACJ,EAAMM,IAAU,CACf,MAAAC,EAASD,IAAUH,EAAY,SAAW,GAC1CK,EAAQR,EAAK,MAAQ,QAAU,GAC/BS,EAAW,KAAK,aAAa,YAAY,GAAKN,EAAYG,EAAQ,GAAK,WACvEI,EAAQV,EAAK,QAAQ,OAAS,GAC7B,MAAA,oCAAoCQ,CAAK,IAAID,CAAM,KAAKE,CAAQ,WAAWC,CAAK,iBAAiBF,CAAK,IAAID,CAAM,KACtHA,GAAU,qBACX,qBAAqBD,EAAQ,CAAC,iBAAiBA,CAAK,KAAKA,EAAQ,CAAC,WAAA,CAClE,EACA,KAAK,EAAE,CAAC;AAAA;AAAA,SAGX,CACD,CC1HA,MAAqBK,UAAuB,WAAY,CA4CvD,aAAc,CACP,QA5CCf,EAAA,eAEAA,EAAA,YAEAA,EAAA,mBA0CD,MAAAC,EAAa,KAAK,QAAQ,aAAa,EAC7C,GAAIA,GAAcA,EAAW,MAAM,IAAI,OAAS,EAAG,CAClD,KAAK,WAAaA,EACZ,MAAAe,EAAY,KAAK,kBACvB,KAAK,OAASA,EAAU,WACnB,KAAA,IAAM,KAAK,QAAU,KAGrB,KAAA,IAAI,iBAAiB,SAAU,IAAM,CAEzC,KAAK,MAAQ,KAAK,OAAA,CAClB,EAGD,KAAK,IAAI,iBAAiB,QAAUd,GAAM,CACzC,MAAMC,EAASD,EAAE,OACbC,aAAkB,oBACjBA,EAAO,QAAQ,YAAc,QAAUA,EAAO,QAAQ,YAAc,SAClE,KAAA,KAAKA,EAAO,QAAQ,SAAS,CAEpC,CACA,EAGDE,EAAa,IAAM,CAClB,QAAQ,IAAI,+CAA+C,EAC3DJ,EAAW,MAAM,cACjB,KAAK,eAAe,CAAA,CACpB,CACF,CAKD,CAzEA,IAAI,OAAiB,CACb,OAAA,KAAK,aAAa,OAAO,CACjC,CAEA,IAAI,MAAMgB,EAAgB,CACrBA,EACE,KAAA,aAAa,QAAS,EAAE,EAE7B,KAAK,gBAAgB,OAAO,CAE9B,CAGA,IAAI,SAAmB,CACtB,OAAO,KAAK,iBAAiB,UAAU,EAAE,SAAW,CACrD,CAEQ,aAAaC,EAAoC,OACxD,IAAIC,EAAKD,IAAc,OAAS,KAAK,mBAAqB,KAAK,uBAK/D,OAHIC,GAAMA,aAAc,aAAeA,EAAG,MAAM,UAAY,SAC3DA,EAAKD,IAAc,OAASC,EAAG,mBAAqBA,EAAG,wBAEpDA,GAAMA,EAAG,QAAQ,SAAS,EAGtBA,EAAG,QAAQ,SAASC,EAAA,KAAK,aAAL,YAAAA,EAAiB,QAAQF,KAAcA,EAAU,QAAQ,MAAQG,GAAMA,EAAE,aAAa,EAE1G,EAET,CAEA,IAAI,QAAS,OACL,QAAAD,EAAA,KAAK,aAAL,YAAAA,EAAiB,QAAQ,SAAU,QAC3C,CAyCO,KAAKF,EAA6B,OAAQ,QAE3CE,EAAA,KAAA,aAAA,MAAAA,EAAY,MAAMF,IACxB,CAEO,mBAA0B,CAQhC,GANA,KAAK,MAAQ,KAAK,QAMd,EAHW,KAAK,IAAI,cAAc,mBAAmB,GAAK,KAAK,IAAI,cAAc,eAAe,GAGvF,CACN,MAAAI,EAAM,SAAS,cAAc,KAAK,EACpCA,EAAA,UAAU,IAAI,aAAa,EAC3BA,EAAA,aAAa,OAAQ,UAAU,EAC/BA,EAAA,aAAa,aAAc,iBAAiB,EAC1C,MAAAC,EAAa,CAACL,EAA6B,SAAW,CACrD,MAAAJ,EAAQ,KAAK,aAAaI,CAAS,EACzC,OAAIJ,EACI,wCAAwCI,CAAS,qBAAqBA,CAAS,oBAAoBA,CAAS,KAAKJ,CAAK,YACnHI,IAAc,OAEjB,uCAAuC,KAAK,MAAM,YAGlD,eACR,EAEGI,EAAA,UAAY,GAAGC,EAAW,MAAM,CAAC,GAAGA,EAAW,MAAM,CAAC,GACrD,KAAA,IAAI,YAAYD,CAAG,CACzB,CACD,CAEQ,gBAAiB,CACN,KAAK,IAAI,iBAAiB,wBAAwB,EAC1D,QAASE,GAAQ,EACtBA,EAAI,QAAQ,YAAc,QAAUA,EAAI,QAAQ,YAAc,UACjEA,EAAI,YAAc,KAAK,aAAaA,EAAI,QAAQ,SAAS,EAC1D,CACA,CACF,CACD,CAEA,eAAe,OAAO,UAAWT,CAAc,EAE/C,eAAe,OAAO,cAAehB,CAAkB"}