{"version":3,"file":"af-group-count.js","sources":["../src/af-group-count.ts"],"sourcesContent":["export default class ActionFormGroupCount extends HTMLElement {\n\tprivate fieldset: HTMLFieldSetElement | null = this.closest(\"fieldset\");\n\t// Needed for validity\n\tprivate internals = this.attachInternals();\n\n\t// Public properties\n\tpublic shadow: ShadowRoot;\n\tpublic value: number = this.getValue();\n\tpublic validity: boolean = this.checkValidity();\n\n\t// Reflected attribute properties\n\tget min(): number {\n\t\treturn Number(this.getAttribute(\"min\") || 1);\n\t}\n\n\tset min(value: number) {\n\t\tthis.setAttribute(\"min\", String(value));\n\t}\n\n\tget max(): number {\n\t\treturn Number(this.getAttribute(\"max\") || Infinity);\n\t}\n\n\tset max(value: number) {\n\t\tthis.setAttribute(\"max\", String(value));\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Stop if this is not in a fieldset\n\t\tif (!this.fieldset) {\n\t\t\tthrow new Error(\"no fieldset found\");\n\t\t}\n\n\t\t// Update min and max from attributes from the closest fieldset\n\t\tconst [minStr, maxStr] = this.fieldset.dataset.group?.split(\"-\") || [];\n\t\tthis.min = Number(minStr || this.min);\n\t\tthis.max = Number(maxStr || this.max);\n\n\t\t// console.log(\"ðŸš€ ~ min/max\", this.fieldset.id, this.min, this.max, Number(minStr), Number(maxStr));\n\n\t\t// set up shadow DOM\n\t\tthis.shadow = this.attachShadow({ mode: \"open\" });\n\t\t// Check validity (this also adds value to shadow DOM)\n\t\tthis.shadow.innerHTML = `${this.value}`;\n\t\tthis.checkValidity();\n\n\t\t// Add error message aria to element\n\t\tthis.setAttribute(\"aria-describedby\", this.fieldset.getAttribute(\"aria-describedby\") || \"\");\n\t\t// Add event listener to fieldset: when any input changes besides this element, check validity\n\t\tthis.fieldset.addEventListener(\"change\", (event) => {\n\t\t\tif (event.target !== this) {\n\t\t\t\tthis.checkValidity();\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic formAssociated = true;\n\n\tattributeChangedCallback() {\n\t\t// if min or max changes then setValidity\n\t\tthis.checkValidity();\n\t}\n\n\tpublic checkValidity(): boolean {\n\t\t// get value based on current state of fieldset elements\n\t\tconst value = this.getValue();\n\t\t// if value is different from this.value then update\n\t\tif (value !== this.value) {\n\t\t\tthis.value = value;\n\t\t\tthis.shadow.innerHTML = `${value}`;\n\t\t\tconsole.log(\"ðŸš€ ~ value:\", value, this.value, this.min, this.max, this.validity);\n\t\t\tthis.dispatchEvent(new Event(\"change\", { bubbles: true, composed: true }));\n\t\t}\n\t\tthis.validity = value >= this.min && value <= this.max;\n\t\tthis.setValidity();\n\t\treturn this.validity;\n\t}\n\n\tprivate getValue() {\n\t\tif (!this.fieldset) {\n\t\t\tthrow new Error(\"no fieldset found\");\n\t\t}\n\t\tconst fields = this.fieldset.querySelectorAll(\"input, select, textarea\") as NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n\t\tconst values = Array.from(fields).filter((field) =>\n\t\t\tfield instanceof HTMLInputElement && [\"checkbox\", \"radio\"].includes(field.type) ? field.checked : field.checkValidity() && field.value\n\t\t);\n\t\treturn values.length;\n\t}\n\n\tpublic setValidity(): void {\n\t\tconst flags = this.validity ? {} : { customError: true };\n\t\tconst message = this.validity ? \"\" : \"Value is out of range\";\n\t\tthis.internals.setValidity(flags, message);\n\t}\n}\n\ncustomElements.define(\"af-group-count\", ActionFormGroupCount);\n"],"names":["ActionFormGroupCount","_a","__publicField","minStr","maxStr","event","value","fields","field","flags","message"],"mappings":"wKAAA,MAAqBA,UAA6B,WAAY,CA2B7D,aAAc,CA3Bf,IAAAC,EA4BQ,QA3BCC,EAAA,gBAAuC,KAAK,QAAQ,UAAU,GAE9DA,EAAA,iBAAY,KAAK,mBAGlBA,EAAA,eACAA,EAAA,aAAgB,KAAK,YACrBA,EAAA,gBAAoB,KAAK,iBAuB3B,IAAC,KAAK,SACH,MAAA,IAAI,MAAM,mBAAmB,EAI9B,KAAA,CAACC,EAAQC,CAAM,IAAIH,EAAA,KAAK,SAAS,QAAQ,QAAtB,YAAAA,EAA6B,MAAM,OAAQ,CAAA,EACpE,KAAK,IAAM,OAAOE,GAAU,KAAK,GAAG,EACpC,KAAK,IAAM,OAAOC,GAAU,KAAK,GAAG,EAKpC,KAAK,OAAS,KAAK,aAAa,CAAE,KAAM,OAAQ,EAEhD,KAAK,OAAO,UAAY,GAAG,KAAK,KAAK,GACrC,KAAK,cAAc,EAGnB,KAAK,aAAa,mBAAoB,KAAK,SAAS,aAAa,kBAAkB,GAAK,EAAE,EAE1F,KAAK,SAAS,iBAAiB,SAAWC,GAAU,CAC/CA,EAAM,SAAW,MACpB,KAAK,cAAc,CACpB,CACA,CACF,CA7CA,IAAI,KAAc,CACjB,OAAO,OAAO,KAAK,aAAa,KAAK,GAAK,CAAC,CAC5C,CAEA,IAAI,IAAIC,EAAe,CACtB,KAAK,aAAa,MAAO,OAAOA,CAAK,CAAC,CACvC,CAEA,IAAI,KAAc,CACjB,OAAO,OAAO,KAAK,aAAa,KAAK,GAAK,GAAQ,CACnD,CAEA,IAAI,IAAIA,EAAe,CACtB,KAAK,aAAa,MAAO,OAAOA,CAAK,CAAC,CACvC,CAmCA,0BAA2B,CAE1B,KAAK,cAAc,CACpB,CAEO,eAAyB,CAEzB,MAAAA,EAAQ,KAAK,WAEf,OAAAA,IAAU,KAAK,QAClB,KAAK,MAAQA,EACR,KAAA,OAAO,UAAY,GAAGA,CAAK,GACxB,QAAA,IAAI,cAAeA,EAAO,KAAK,MAAO,KAAK,IAAK,KAAK,IAAK,KAAK,QAAQ,EAC1E,KAAA,cAAc,IAAI,MAAM,SAAU,CAAE,QAAS,GAAM,SAAU,EAAM,CAAA,CAAC,GAE1E,KAAK,SAAWA,GAAS,KAAK,KAAOA,GAAS,KAAK,IACnD,KAAK,YAAY,EACV,KAAK,QACb,CAEQ,UAAW,CACd,GAAA,CAAC,KAAK,SACH,MAAA,IAAI,MAAM,mBAAmB,EAEpC,MAAMC,EAAS,KAAK,SAAS,iBAAiB,yBAAyB,EAIvE,OAHe,MAAM,KAAKA,CAAM,EAAE,OAAQC,GACzCA,aAAiB,kBAAoB,CAAC,WAAY,OAAO,EAAE,SAASA,EAAM,IAAI,EAAIA,EAAM,QAAUA,EAAM,cAAA,GAAmBA,EAAM,KAAA,EAEpH,MACf,CAEO,aAAoB,CAC1B,MAAMC,EAAQ,KAAK,SAAW,CAAK,EAAA,CAAE,YAAa,IAC5CC,EAAU,KAAK,SAAW,GAAK,wBAChC,KAAA,UAAU,YAAYD,EAAOC,CAAO,CAC1C,CACD,CAtCCR,EA1DoBF,EA0Db,iBAAiB,IAwCzB,eAAe,OAAO,iBAAkBA,CAAoB"}