var m=Object.defineProperty;var c=(o,e,t)=>e in o?m(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var n=(o,e,t)=>(c(o,typeof e!="symbol"?e+"":e,t),t);import"./action-form.js";import"./af-error.js";import"./af-step.js";import"./af-progress.js";import"./af-group-count.js";import"./af-text-count.js";class p extends HTMLElement{constructor(){super();n(this,"shadow");this.shadow=this.attachShadow({mode:"open"}),this.shadow.innerHTML="<button part='button'><slot>Toggle Steps</slot></button>",this.addEventListener("click",()=>{var t;(t=this.closest("action-form"))==null||t.classList.toggle("no-steps")})}}customElements.define("af-step-toggle",p);class f extends HTMLElement{constructor(){super();n(this,"form");const t=this.closest("action-form");this.form=this.closest("form"),!(!t||!this.form)&&t.addEventListener("af-step",()=>{this.render()})}connectedCallback(){this.render()}getFormData(){if(!this.form)return;const t=new FormData(this.form);return console.log("formData",t),[...new Set(Array.from(t.keys()))].filter(s=>t.has(s)&&t.getAll(s).some(i=>i!=="")).map(s=>{const a=t.getAll(s).filter(l=>typeof l=="string");return{key:s,value:a}})}render(){const t=this.getFormData();console.log("data",t),this.innerHTML=`${t==null?void 0:t.map(r=>`<p><strong>${r.key}</strong>: ${r.value.map(s=>`<span>${s}</span>`).join("")}</p>`).join("")}`}}customElements.define("af-preview",f);
//# sourceMappingURL=index.js.map
